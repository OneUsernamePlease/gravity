{"version":3,"file":"index-DgOzLsm6.js","sources":["../../src/scripts/vector2d.ts","../../src/scripts/types.ts","../../src/scripts/canvas.ts","../../src/scripts/essentials.ts","../../src/const.ts","../../src/scripts/gravity.ts","../../src/scripts/inputs.ts","../../src/scripts/sandbox.ts","../../src/scripts/main.ts"],"sourcesContent":["export class Vector2D {\r\n    public x: number;\r\n    public y: number;\r\n    constructor(x?: number, y?: number) {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    public toString() {\r\n        return `x: ${this.x}, y: ${this.y}`;\r\n    }\r\n    public add(...vectors: Vector2D[]): Vector2D {\r\n        const result: Vector2D = vectors.reduce((previous, current) => {\r\n            return new Vector2D(previous.x + current.x, previous.y + current.y);\r\n        }, new Vector2D(this.x, this.y));\r\n        return result;\r\n    }\r\n    /**\r\n     * @returns this - v\r\n     */\r\n    public subtract(v: Vector2D): Vector2D {\r\n        return new Vector2D(this.x - v.x, this.y - v.y);\r\n    }\r\n    public scale(scalar: number): Vector2D {\r\n        return new Vector2D(this.x * scalar, this.y * scalar);\r\n    }\r\n    public dotProduct(v: Vector2D): number {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    public magnitude(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    public normalize(): Vector2D {\r\n        const magnitude = this.magnitude();\r\n        if (magnitude === 0) {\r\n            return new Vector2D(0, 0);\r\n        } else {\r\n            return this.scale(1 / magnitude);\r\n        }\r\n    }\r\n    /**\r\n     * @param v Vector2D\r\n     * @returns Distance to v\r\n     */\r\n    public distance(v: Vector2D): number {\r\n        return Math.sqrt((v.x - this.x)**2 + (v.y - this.y)**2);\r\n    }\r\n    /**\r\n     * returns a vector pointing to v\r\n     */\r\n    public displacementVector(v: Vector2D) {\r\n        return v.subtract(this);\r\n    }\r\n    public hadamardProduct(v: Vector2D) {\r\n        return new Vector2D(this.x * v.x, this.y * v.y);\r\n    }\r\n    /**\r\n     * @returns an array of two normalized vectors, both normal to this, both pointing in opposite directions\r\n     */\r\n    public normalVectors(): Vector2D[] {\r\n        const array: Vector2D[] = [];\r\n        const v = this.normalize();\r\n        array.push(new Vector2D(-v.y, v.x));\r\n        array.push(new Vector2D(v.y, -v.x));\r\n        return array;\r\n    }\r\n    /**\r\n     * Reflects this vector on reflectionSurface.\r\n     * @param reflectionSurface acts as a mirror\r\n     * @returns The reflected vector\r\n     */\r\n    public reflect(reflectionSurface: Vector2D): Vector2D {\r\n        reflectionSurface = reflectionSurface.normalize();\r\n        const axis = reflectionSurface.normalVectors()[0];\r\n        const dotAxis = this.dotProduct(axis);\r\n        const projection = axis.scale(dotAxis).scale(2);\r\n        const reflected = this.subtract(projection);\r\n        return reflected;\r\n    }\r\n}","import { Body2d } from \"./gravity\";\r\nimport { Vector2D } from \"./vector2d\";\r\nexport interface AnimationSettings {\r\n    defaultScrollRate: number;\r\n    defaultZoomStep: number;\r\n    frameLength: number; // ms\r\n    displayVectors: boolean;\r\n    tracePaths: boolean;\r\n\r\n}\r\nexport enum CanvasClickAction {\r\n    None = 0,\r\n    AddBody = 1,\r\n    ScrollCanvas = 2,\r\n}\r\nexport enum MouseBtnState {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\nexport interface CanvasSpace { \r\n    // use this to transform simulationSpace to canvasSpace and back\r\n    origin: Vector2D, // the canvas' origin in simulation space\r\n    currentZoom: number, // simulationUnits (meter) per canvasUnit\r\n    orientationY: number; // in practice this is -1, as the y-axis of the canvas is in the opposite direction of the simulation\r\n}\r\nexport interface ObjectState {\r\n    body: Body2d, \r\n    position: Vector2D,\r\n    /**\r\n     * simulationUnits (meter?) per second\r\n     */\r\n    velocity: Vector2D,\r\n    acceleration: Vector2D\r\n}","import { Body2d } from \"./gravity\";\r\nimport { CanvasSpace, ObjectState } from \"./types\";\r\nimport { Vector2D } from \"./vector2d\";\r\n\r\nexport class Canvas {\r\n    // let offscreenCanvas: OffscreenCanvas; // use this in a worker thread to render or draw on, then transfer content to the visible html-canvas\r\n    // let offscreenCanvasCtx: OffscreenCanvasRenderingContext2D;\r\n    private _visibleCanvas: HTMLCanvasElement;\r\n    private _visibleCanvasContext: CanvasRenderingContext2D;\r\n    private _canvasSpace: CanvasSpace;\r\n    constructor(visibleCanvas: HTMLCanvasElement) {\r\n        this._visibleCanvas = visibleCanvas;\r\n        this._visibleCanvasContext = visibleCanvas.getContext(\"2d\")!;\r\n        this._canvasSpace = {origin: new Vector2D(0, 0), currentZoom: 1, orientationY: -1};\r\n    }\r\n    //#region get, set\r\n    get visibleCanvas() {\r\n        return this._visibleCanvas;\r\n    }\r\n    set visibleCanvas(canvas: HTMLCanvasElement) {\r\n        this._visibleCanvas = canvas;\r\n    }\r\n    get visibleCanvasContext() {\r\n        return this._visibleCanvasContext;\r\n    }\r\n    set visibleCanvasContext(context: CanvasRenderingContext2D) {\r\n        this._visibleCanvasContext = context;\r\n    }\r\n    get canvasSpace() {\r\n        return this._canvasSpace;\r\n    }\r\n    set canvasSpace(canvasSpace: CanvasSpace) {\r\n        this._canvasSpace = canvasSpace;\r\n    }\r\n    //#endregion\r\n\r\n    //#region settings\r\n    public resize(width: number, height: number) {\r\n        this.visibleCanvas.width = width;\r\n        this.visibleCanvas.height = height;\r\n    }   \r\n\r\n    //#endregion\r\n\r\n    //#region drawing stuff\r\n    /**\r\n     * @param position in canvas space\r\n     * @param direction in canvas space\r\n     */\r\n    public drawVector(position: Vector2D, direction: Vector2D, color?: string) {\r\n        // optionally normalize the direction and scale later\r\n        if (color === undefined) { color = \"white\" }\r\n        let endPosition: Vector2D = position.add(direction);\r\n        this.visibleCanvasContext.beginPath();\r\n        this.visibleCanvasContext.lineWidth = 3;\r\n        this.visibleCanvasContext.strokeStyle = color;\r\n        this.visibleCanvasContext.moveTo(position.x, position.y);\r\n        this.visibleCanvasContext.lineTo(endPosition.x, endPosition.y);\r\n        this.visibleCanvasContext.stroke();\r\n    }\r\n    public drawVectors(objectStates: ObjectState[]) {\r\n        objectStates.forEach(objectState => {\r\n            this.drawVector(this.pointFromSimulationSpaceToCanvasSpace(objectState.position), this.directionFromSimulationSpaceToCanvasSpace(objectState.acceleration), \"green\");\r\n            this.drawVector(this.pointFromSimulationSpaceToCanvasSpace(objectState.position), this.directionFromSimulationSpaceToCanvasSpace(objectState.velocity), \"red\");\r\n        });\r\n    }\r\n    /**\r\n     * draws a circular body at specified position, in specified color\r\n     * @param body \r\n     * @param position \r\n     * @param color default white\r\n     */\r\n    public drawBody(body: Body2d, position: Vector2D) {\r\n        let visibleRadius = Math.max(body.radius / this.canvasSpace.currentZoom, 1); // Minimum Radius of displayed body is one\r\n        this.visibleCanvasContext.beginPath();\r\n        this.visibleCanvasContext.arc(position.x, position.y, visibleRadius, 0, Math.PI * 2);\r\n        this.visibleCanvasContext.closePath();\r\n        this.visibleCanvasContext.fillStyle = body.color;\r\n        this.visibleCanvasContext.fill();\r\n    }\r\n    public drawBodies(objectStates: ObjectState[]) {\r\n        objectStates.forEach(object => {\r\n            // REFACTOR ME: draw only if body or its vectors are (partially) visible, otherwise return \r\n            this.drawBody(object.body, this.pointFromSimulationSpaceToCanvasSpace(object.position));\r\n        });\r\n    }\r\n    public redrawSimulationState(objectStates: ObjectState[], displayVectors: boolean) {\r\n        // REFACTOR ME: instead of displayVectors, pass the current animationSettings, then extract the values here\r\n        this.visibleCanvasContext.clearRect(0, 0, this.visibleCanvas.width, this.visibleCanvas.height);\r\n        this.drawBodies(objectStates);\r\n        if (displayVectors) {\r\n            this.drawVectors(objectStates);\r\n        }\r\n    }\r\n    //#endregion\r\n    private pointFromSimulationSpaceToCanvasSpace(simVector: Vector2D): Vector2D {\r\n    // transformation:\r\n    // 1. shift (point in SimSpace - Origin of C in SimSpace)\r\n    // 2. flip (y axis point in opposite directions)\r\n    // 3. scale (result from 2 divided by Zoom in simulationUnits/canvasUnit)\r\n    const shifted: Vector2D = simVector.subtract(this.canvasSpace.origin);\r\n    const flipped: Vector2D = new Vector2D(shifted.x, shifted.y * -1);\r\n    const scaled: Vector2D = flipped.scale(1 / this.canvasSpace.currentZoom);\r\n    return scaled;\r\n    }\r\n    private directionFromSimulationSpaceToCanvasSpace(simVector: Vector2D): Vector2D {\r\n        // transformation:\r\n        // 1. flip (y axis are in opposite directions)\r\n        // 2. scale (result from 2 divided by Zoom in simulationUnits/canvasUnit)\r\n        const flipped: Vector2D = new Vector2D(simVector.x, simVector.y * -1);\r\n        const scaled: Vector2D = flipped.scale(1 / this.canvasSpace.currentZoom);\r\n        return scaled;\r\n    }\r\n    public pointFromCanvasSpaceToSimulationSpace(canvasVector: Vector2D): Vector2D {\r\n        // transformation:\r\n        // 1. scale (canvasVector * zoom in simulationUnits/canvasUnit)\r\n        // 2. flip (y axis are in opposite directions)\r\n        // 3. shift (scaledAndFlippedPoint + Origin of C in SimSpace)\r\n        let simulationVector: Vector2D;\r\n        simulationVector = canvasVector.scale(this.canvasSpace.currentZoom).hadamardProduct(new Vector2D(1, this.canvasSpace.orientationY)).add(this.canvasSpace.origin);\r\n        return simulationVector;\r\n    }\r\n    /**\r\n     * Origin {x:0,y:0} is at the top-left\r\n     */\r\n    private setOrigin(newOrigin: Vector2D) {\r\n        this.canvasSpace.origin = newOrigin;\r\n    }\r\n    public moveCanvas(displacement: Vector2D) {\r\n        const originPosition = this._canvasSpace.origin;\r\n        const newOrigin = new Vector2D(originPosition.x + displacement.x, originPosition.y + displacement.y);\r\n        this.setOrigin(newOrigin);\r\n    }\r\n    public moveCanvasRight(distance: number) {\r\n        this.setOrigin(new Vector2D(this.canvasSpace.origin.x + distance, this.canvasSpace.origin.y));\r\n    }\r\n    public moveCanvasLeft(distance: number) {\r\n        this.setOrigin(new Vector2D(this.canvasSpace.origin.x - distance, this.canvasSpace.origin.y ));\r\n    }\r\n    public moveCanvasUp(distance: number) {\r\n        this.setOrigin(new Vector2D(this.canvasSpace.origin.x, this.canvasSpace.origin.y + distance));\r\n    }\r\n    public moveCanvasDown(distance: number) {\r\n        this.setOrigin(new Vector2D(this.canvasSpace.origin.x, this.canvasSpace.origin.y - distance));\r\n    }\r\n    public zoomOut(zoomCenter: Vector2D, zoomStep: number) {\r\n        const shiftOrigin: Vector2D = zoomCenter.scale(zoomStep);\r\n        const newZoom = this.canvasSpace.currentZoom + zoomStep;\r\n\r\n        this.canvasSpace.origin = new Vector2D(this.canvasSpace.origin.x - shiftOrigin.x, this.canvasSpace.origin.y + shiftOrigin.y);\r\n        this.canvasSpace.currentZoom = newZoom;\r\n    }\r\n    public zoomIn(zoomCenter: Vector2D, zoomStep: number) {\r\n        if (this.canvasSpace.currentZoom <= 1) { \r\n            return; \r\n        }\r\n\r\n        let newZoom = this.canvasSpace.currentZoom - zoomStep;\r\n        if (newZoom < 1) {\r\n            newZoom = 1;\r\n            zoomStep = this.canvasSpace.currentZoom - 1;\r\n        }\r\n        \r\n        let shiftOrigin: Vector2D = zoomCenter.scale(zoomStep);\r\n        this.canvasSpace.origin = new Vector2D(this.canvasSpace.origin.x + shiftOrigin.x, this.canvasSpace.origin.y - shiftOrigin.y);\r\n        this.canvasSpace.currentZoom = newZoom;\r\n    }\r\n    public getCanvasMousePosition(event: MouseEvent): Vector2D {\r\n        const rect = this.visibleCanvas.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        return new Vector2D(x, y);\r\n    }\r\n    public getCanvasTouchPosition(event: TouchEvent): Vector2D {\r\n        const rect = this.visibleCanvas.getBoundingClientRect();\r\n        const touch = event.touches[0];\r\n        return new Vector2D(touch.clientX - rect.left, touch.clientY - rect.top)\r\n    }\r\n    public getCanvasTouchEndPosition(event: TouchEvent): Vector2D {\r\n        const rect = this.visibleCanvas.getBoundingClientRect();\r\n        const touch = event.changedTouches[0];\r\n        return new Vector2D(touch.clientX - rect.left, touch.clientY - rect.top)\r\n    }\r\n}","\r\n/*\r\nJust Some functions\r\n(hopefully moderately helpful)\r\n*/\r\n//#region generic stuff\r\nexport function log(message: string) {\r\n    const timestamp = new Date();\r\n    const hours = timestamp.getHours().toString().padStart(2, '0');\r\n    const minutes = timestamp.getMinutes().toString().padStart(2, '0');\r\n    const seconds = timestamp.getSeconds().toString().padStart(2, '0');\r\n    const milliseconds = timestamp.getMilliseconds().toString().padStart(3, '0');\r\n\r\n    const formattedTimestamp = `${hours}:${minutes}:${seconds}.${milliseconds}`;\r\n    console.log(`[${formattedTimestamp}] ${message}`);\r\n}\r\n/**\r\n * min and max included\r\n * @returns random number\r\n */\r\nexport function rng(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n//#endregion\r\n\r\n//#region math stuff\r\n/**\r\n * empty string is NOT considered numeric\r\n * @param s the string to be examined\r\n * @returns true if s is a valid number, returns false otherwise\r\n */\r\nexport function isNumeric(s: string): boolean {\r\n    s = s.trim();\r\n    return (!isNaN(+s)) && s.length !== 0;\r\n}\r\n/**\r\n * @returns \"\", if d is a non-numeric string\r\n */\r\nexport function decimalToHex(d: string | number): string {\r\n    if (typeof(d) === \"string\")  {\r\n        if (isNumeric(d)) {\r\n            d = parseFloat(d);\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n    return d.toString(16);\r\n}\r\n/**\r\n * converts a hexadecimal-number-string to a decimal number and returns it\r\n * @returns 0 if hex is not a valid hexadecimal number\r\n */\r\nexport function hexToDecimal(hex: string): number {\r\n    const prefix = \"0x\"\r\n    if (!(hex.startsWith(prefix))) {\r\n        hex = prefix + hex;\r\n    }\r\n    const num: number = Number(hex);\r\n    const valid = !isNaN(num);\r\n    return valid ? num : 0;\r\n}\r\n/**\r\n * ensures min <= n <= max (Inclusive!)\r\n * @param n number to test against upper and lower bounds\r\n * @param min the lowest allowed value for n\r\n * @param max the highest allowed value for n\r\n * @returns n if n satisfies min <= n <= max, otherwise min or max are returned\r\n */\r\nexport function ensureNumberInRange(n: number, min: number, max: number): number {\r\n    return Math.max(min, Math.min(n, max))\r\n}\r\n//#endregion\r\n\r\n//#region string stuff\r\n/**\r\n * Removes all occurrences of charToRemove from the beginning of str\r\n * @param str the string to be modified\r\n * @param charToRemove ***optional*** If no value is provided the first character of str is used.\r\n */\r\nexport function removeLeadingChar(str: string, charToRemove?: string): string {\r\n    if (str.length < 1) { return \"\"; }\r\n    if (charToRemove === undefined) {\r\n        charToRemove = str[0];\r\n    }\r\n\r\n    while (str.startsWith(charToRemove)) {\r\n        str = str.slice(charToRemove.length);\r\n    }\r\n    return str;\r\n}\r\n//#endregion\r\n\r\n//#region input stuff\r\nexport function getInputValue(inputElement: HTMLInputElement): string \r\nexport function getInputValue(inputId: string): string \r\nexport function getInputValue(input: string | HTMLInputElement): string {\r\n    let inputElement: HTMLInputElement;\r\n    if (typeof input === \"string\") {\r\n        inputElement = <HTMLInputElement>document.getElementById(input);\r\n    } else {\r\n        inputElement = input;\r\n    }\r\n    return inputElement.value.trim();\r\n}\r\n/**\r\n * @param input an HTMLInputElement, or the id for the Element\r\n * @returns element's value attribute; 0 if value is not numeric\r\n */\r\nexport function getInputNumber(input: string | HTMLInputElement): number {\r\n    let inputValue: string\r\n    if (typeof input === \"string\") {\r\n        inputValue = getInputValue(input);\r\n    } else {\r\n        inputValue = getInputValue(input);\r\n    }\r\n    return isNumeric(inputValue) ? +inputValue : 0;\r\n}\r\n/**\r\n * @param inputId id for a checkable input (radioButton, checkbox)\r\n * @returns true if checked, false otherwise\r\n */\r\nexport function isChecked(inputElement: HTMLInputElement): boolean\r\nexport function isChecked(inputId: string): boolean\r\nexport function isChecked(input: string | HTMLInputElement): boolean {\r\n    let checkbox: HTMLInputElement;\r\n    if (typeof input === \"string\") {\r\n        checkbox = document.getElementById(input) as HTMLInputElement;\r\n    } else {\r\n        checkbox = input;\r\n    }\r\n    return checkbox ? checkbox.checked : false;\r\n}\r\n//#endregion","//#region ids\r\nexport const MASS_INPUT_ID = \"massInput\";\r\nexport const CANVAS_ID = \"theCanvas\";\r\nexport const STATUS_BAR_ID = \"statusBar\";\r\n//#endregion\r\n//#region numbers\r\nexport const DEFAULT_G = 50;\r\nexport const MIN_G = -10;\r\nexport const MAX_G = 100;\r\n//#endregion","import { ObjectState } from \"./types\";\r\nimport { Vector2D } from \"./vector2d\";\r\nimport * as c from \"../const\";\r\n\r\nexport class Body2d {\r\n    private _mass: number;\r\n    private _radius: number;\r\n    private _color: string;\r\n    private _movable: boolean;\r\n    static defaultDensity = 1;\r\n\r\n    // #region constructor, get, set\r\n    constructor(mass: number, movable?: boolean, color?: string, radius?: number)  {\r\n        this._mass = mass;\r\n        if (radius === undefined) { radius = this.defaultRadius(mass); }\r\n        this._radius = radius;\r\n        if (color === undefined) { color = \"white\"; }\r\n        this._color = color;\r\n        if (movable === undefined) { movable = true; }\r\n        this._movable = movable;     \r\n    }\r\n    public get mass() {\r\n        return this._mass;\r\n    }\r\n    public set mass(newMass: number) {\r\n        this._mass = newMass;\r\n    }\r\n    public get radius() {\r\n        return this._radius;\r\n    }\r\n    public set radius(newRadius: number) {\r\n        this._radius = newRadius;\r\n    }\r\n    public get movable() {\r\n        return this._movable;\r\n    }\r\n    public set movable(affected: boolean) {\r\n        this._movable = affected\r\n    }   \r\n    public get color() : string {\r\n        return this._color\r\n    }\r\n    public set color(c: string) {\r\n        if (!(CSS.supports(\"color\", c))) {\r\n            c = \"white\";\r\n        }\r\n        this._color = c;\r\n    } \r\n    // #endregion\r\n    /**\r\n     * returns the radius of a sphere based on mass and density\r\n     */\r\n    public defaultRadius(mass?: number) {\r\n        if (mass === undefined) {\r\n            mass = this.mass;\r\n        }\r\n        return ((3 * mass)/(4 * Math.PI * Body2d.defaultDensity)) ** (1/3); \r\n    }\r\n}\r\nexport class Simulation {\r\n    private _simulationState: ObjectState[];\r\n    public _running: boolean;\r\n    public _tickCount: number;\r\n    private _tickLength: number;\r\n    private _collisionDetection: boolean;\r\n    private _elasticCollisions: boolean;\r\n    private _g: number; // gravitational constant\r\n    private readonly gravityLowerBounds: number = 1; // force calculations for distances lower than this number are skipped\r\n    constructor() { \r\n        this._simulationState = [];\r\n        this._running = false;\r\n        this._tickCount = 0;\r\n        this._tickLength = 10; // ms\r\n        this._collisionDetection = false;\r\n        this._elasticCollisions = false;\r\n        this._g = c.DEFAULT_G;\r\n    }\r\n    // #region get, set\r\n    public get simulationState() {\r\n        return this._simulationState;\r\n    }\r\n    public set simulationState(objectState: ObjectState[]) {\r\n        this._simulationState = objectState;\r\n    }\r\n    public get running() {\r\n        return this._running;\r\n    }\r\n    public set running(running: boolean) {\r\n        this._running = running;\r\n    }\r\n    public get tickCount() {\r\n        return this._tickCount;\r\n    }\r\n    public set tickCount(tickCount: number) {\r\n        this._tickCount = tickCount;\r\n    }\r\n    public get tickLength() {\r\n        return this._tickLength;\r\n    }\r\n    public set tickLength(t: number) {\r\n        this._tickLength = t;\r\n    }\r\n    public get collisionDetection() {\r\n        return this._collisionDetection;\r\n    }\r\n    public set collisionDetection(collisionDetection: boolean) {\r\n        this._collisionDetection = collisionDetection;\r\n    }\r\n    public get elasticCollisions() {\r\n        return this._elasticCollisions;\r\n    }\r\n    public set elasticCollisions(elasticCollisions: boolean) {\r\n        this._elasticCollisions = elasticCollisions;\r\n    }\r\n    public get g() {\r\n        return this._g;\r\n    }\r\n    public set g(g: number) {\r\n        this._g = g;\r\n    }\r\n// #endregion\r\n    public addObject(body: Body2d, position: Vector2D, velocity: Vector2D): number \r\n    public addObject(objectState: ObjectState): number \r\n    public addObject(bodyOrObject: ObjectState | Body2d, position?: Vector2D, velocity?: Vector2D): number {\r\n        if (bodyOrObject instanceof Body2d) {\r\n            bodyOrObject = {body: bodyOrObject, position: position!, velocity: velocity!, acceleration: new Vector2D(0, 0)};\r\n        }\r\n        if (!bodyOrObject.body.movable) {\r\n            bodyOrObject.velocity = new Vector2D(0, 0);\r\n        }\r\n        return this.simulationState.push(bodyOrObject);\r\n    }\r\n    private clearObjects() {\r\n        this.simulationState = [];\r\n    }\r\n    private removeFromObjectStates(index: number) {\r\n        this.simulationState.splice(index, 1);\r\n    }\r\n    public pause() {\r\n        this.running = false;\r\n    }\r\n    public run() {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n        this.running = true;\r\n\r\n        const runSimulationStep = () => {\r\n            if (this.running) {\r\n                setTimeout(runSimulationStep, this.tickLength);\r\n                this.advanceTick();\r\n            }\r\n        };\r\n        runSimulationStep();\r\n    }\r\n    public reset() {\r\n        this.clearObjects();\r\n        this.tickCount = 0;\r\n    }\r\n    /**\r\n     * Calculates and returns the velocity vector needed to get from *fromCoordinate* to *toCoordinate* in *timeFrameInSeconds* seconds\r\n     * @param toCoordinate value in simulation space\r\n     * @param fromCoordinate value in simulation space\r\n     * @param timeFrameInSeconds *optional* defaults to 1\r\n     */\r\n    public calculateVelocityBetweenPoints(toCoordinate: Vector2D, fromCoordinate: Vector2D, timeFrameInSeconds: number = 1): Vector2D {\r\n        if (timeFrameInSeconds <= 0) { timeFrameInSeconds = 1; }\r\n        let distance: Vector2D = toCoordinate.subtract(fromCoordinate);\r\n        return distance.scale(1 / timeFrameInSeconds);\r\n    }\r\n    public advanceTick() {\r\n        this.updateAccelerationVectors();\r\n        this.updateVelocitiesAndPositions();\r\n        if (this.collisionDetection) {\r\n            this.handleCollisions();\r\n        }\r\n        this.tickCount++;\r\n    }\r\n    private updateAccelerationVectors() {\r\n        const forces: Map<number, Vector2D> = this.calculateForces();\r\n\r\n        this.simulationState.forEach((objectState, index) => {\r\n            const totalForceOnBody = forces.get(index) || (new Vector2D(0, 0));\r\n            const newAcceleration = totalForceOnBody.scale(1 / objectState.body.mass);\r\n            objectState.acceleration = newAcceleration;\r\n        });\r\n    }\r\n    private calculateForces() {\r\n        const forces: Map<number, Vector2D> = new Map();\r\n        \r\n        for (let i = 0; i < this.simulationState.length; i++) {\r\n            for (let j = i+1; j < this.simulationState.length; j++) {\r\n                const forceOnI = this.calculateForceBetweenBodies(i, j);\r\n                const forceOnJ = forceOnI.scale(-1);\r\n\r\n                forces.set(i, (forces.get(i) || new Vector2D(0, 0)).add(forceOnI));\r\n                forces.set(j, (forces.get(j) || new Vector2D(0, 0)).add(forceOnJ));\r\n            }\r\n        }\r\n        return forces;\r\n    }\r\n    /**\r\n     * Calculates the next **position** and **velocity** of the object in state, and updates objectState accordingly.\r\n     * @param objectState *ObjectState* containing the body\r\n     */\r\n    private updateVelocityAndPosition(objectState: ObjectState) {\r\n        const dt = this.tickLength / 1000;\r\n        if (!objectState.body.movable) { return; }\r\n        objectState.velocity = objectState.velocity.add(objectState.acceleration.scale(dt));\r\n        objectState.position = objectState.position.add(objectState.velocity.scale(dt));\r\n    }\r\n    private updateVelocitiesAndPositions() {\r\n        this.simulationState.forEach(objectState => {\r\n            this.updateVelocityAndPosition(objectState)\r\n        });\r\n    }\r\n    /**\r\n     * Calculates the force-vector between the bodies in objectStates at index [i] and [j]\r\n     * @returns a vector representing the force applied ***to*** body at ***objectStates[i]***\r\n     */\r\n    private calculateForceBetweenBodies(i: number, j: number): Vector2D {\r\n        const objectStateI = this.simulationState[i];\r\n        const objectStateJ = this.simulationState[j];\r\n\r\n        const distance = objectStateI.position.distance(objectStateJ.position);\r\n        if (distance < this.gravityLowerBounds || distance === 0) // if the bodies are too close, skip the calculation\r\n            { return new Vector2D(0, 0); } \r\n        const netForceBetweenBodies: number = this.g * ((objectStateI.body.mass * objectStateJ.body.mass)/(distance * distance));\r\n        const unitVectorIToJ = objectStateJ.position.subtract(objectStateI.position).normalize();\r\n        return unitVectorIToJ.scale(netForceBetweenBodies);\r\n    }\r\n    private handleCollisions() {\r\n        for (let i = 0; i < this.simulationState.length; i++) {\r\n            const objectStateI = this.simulationState[i];\r\n            if (objectStateI === undefined) {\r\n                // undefined, if objectStateI has been merged in a previous collision\r\n                continue;\r\n            }\r\n            for (let j = i+1; j < this.simulationState.length; j++) {\r\n                const objectStateJ = this.simulationState[j];\r\n                const distanceIJ = objectStateI.position.distance(objectStateJ.position);\r\n                const collision = distanceIJ <= objectStateI.body.radius + objectStateJ.body.radius;\r\n                if (collision) {\r\n                    if (distanceIJ <= objectStateI.body.radius || distanceIJ <= objectStateJ.body.radius) { \r\n                        this.mergeBodies(i, j);\r\n                    } else if (this.elasticCollisions) {\r\n                        this.elasticCollision(objectStateI, objectStateJ);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Merges the two bodies at indices in objectStates into one. The lighter body is merged into the heavier one. Momentum is preserved.\r\n     */\r\n    private mergeBodies(index1: number, index2: number) {\r\n        const state1: ObjectState = this.simulationState[index1];\r\n        const state2: ObjectState = this.simulationState[index2];\r\n        const totalMomentum = state1.velocity.scale(state1.body.mass).add(state2.velocity.scale(state2.body.mass));\r\n        const totalMass = state1.body.mass + state2.body.mass;\r\n        const resultingVelocity = totalMomentum.scale(1 / totalMass);\r\n        let changeObject: ObjectState;\r\n        let removeIndex: number;\r\n\r\n        if (state2.body.mass > state1.body.mass) {\r\n            changeObject = state2;\r\n            removeIndex = index1;\r\n        } else {\r\n            changeObject = state1;\r\n            removeIndex = index2;\r\n        }\r\n        changeObject.velocity = resultingVelocity;\r\n        changeObject.body.mass = totalMass;\r\n        changeObject.body.radius = changeObject.body.defaultRadius();\r\n        changeObject.body.movable = (state1.body.movable && state2.body.movable);\r\n        if (!changeObject.body.movable) {\r\n            changeObject.velocity = new Vector2D(0, 0);\r\n        }\r\n        this.removeFromObjectStates(removeIndex);\r\n    }\r\n    /**\r\n    * @param restitution number between 0 (perfectly inelastic) and 1 (perfectly elastic)\r\n    */\r\n    private elasticCollision(body1: ObjectState, body2: ObjectState, restitution: number = 1) {\r\n        const lowerBounds = 1;\r\n\r\n        // normal vector between the bodies\r\n        const displacement = body1.position.displacementVector(body2.position);\r\n        const distance = displacement.magnitude(); \r\n        if (distance <= lowerBounds || distance === 0) {\r\n            return; \r\n        }\r\n        const normalizedDisplacement = displacement.scale(1 / distance);\r\n\r\n        // relative velocity along the normalDisplacement?\r\n        const relativeVelocity = body2.velocity.subtract(body1.velocity);\r\n        const velocityAlongDisplacement = relativeVelocity.dotProduct(normalizedDisplacement);\r\n\r\n        // if the bodies are moving apart, do nothing\r\n        if (velocityAlongDisplacement > 0) { return; }\r\n\r\n        // impulseScalar = change in momentum as scalar\r\n        const impulseScalar = -(1 + restitution) * velocityAlongDisplacement / (body1.body.mass + body2.body.mass);\r\n\r\n        // update velocities based on the impulse scalar\r\n        const deltaV1 = normalizedDisplacement.scale(impulseScalar * body2.body.mass);\r\n        const deltaV2 = normalizedDisplacement.scale(impulseScalar * body1.body.mass);\r\n        body1.velocity = body1.velocity.subtract(deltaV1);\r\n        body2.velocity = body2.velocity.add(deltaV2);\r\n        \r\n        // REFACTOR ME: at the top, check for movable, if not just reflect velocity\r\n        // if a body is immovable, reset its velocity and transfer it back\r\n        if (!body1.body.movable) {\r\n            body1.velocity = new Vector2D(0, 0);\r\n            body2.velocity = body2.velocity.add(deltaV1);\r\n        }\r\n        if (!body2.body.movable) {\r\n            body2.velocity = new Vector2D(0, 0);\r\n            body1.velocity = body1.velocity.add(deltaV2);\r\n        }\r\n    }\r\n    private placeBodiesTangentially(objectState1: ObjectState, objectState2: ObjectState) {\r\n        const displacement = objectState1.position.displacementVector(objectState2.position);\r\n        const normalDisplacement = displacement.normalize();        \r\n        const targetDistance = objectState1.body.radius + objectState2.body.radius;\r\n        const totalMoveDistance = targetDistance - displacement.magnitude();\r\n        if (targetDistance === 0) {\r\n            return;\r\n        }\r\n        const moveBody1 = normalDisplacement.scale(totalMoveDistance * (objectState1.body.radius / targetDistance));\r\n        const moveBody2 = normalDisplacement.scale(totalMoveDistance * (objectState2.body.radius / targetDistance));\r\n    \r\n        objectState1.position = objectState1.position.subtract(moveBody1);\r\n        objectState2.position = objectState2.position.add(moveBody2);\r\n    }\r\n}\r\n","import { Body2d } from \"./gravity\";\r\nimport * as tsEssentials from \"./essentials\";\r\nimport { MASS_INPUT_ID } from \"../const\";\r\n\r\nexport class Inputs {\r\n    private _selectedMass: number;\r\n    //#region get, set\r\n    public get selectedMass() {\r\n        return this._selectedMass;\r\n    }\r\n    public set selectedMass(inputValue: number) {\r\n        this._selectedMass = inputValue;\r\n    }\r\n    //#endregion\r\n    constructor() {\r\n        this._selectedMass = tsEssentials.getInputNumber(MASS_INPUT_ID);\r\n\r\n        (<HTMLInputElement>document.getElementById(MASS_INPUT_ID)!).step = this.calculateMassInputStep();\r\n    }\r\n    public body2dFromInputs(): Body2d {\r\n        const movable = tsEssentials.isChecked(\"cbxBodyMovable\");\r\n        return new Body2d(this.selectedMass, movable);\r\n    }\r\n    public updateSelectedMass(inputElement: HTMLInputElement) {\r\n        const inputValue = inputElement.value;\r\n        this.selectedMass = tsEssentials.isNumeric(inputValue) ? +inputValue : 0;\r\n        inputElement.step = this.calculateMassInputStep();\r\n    }\r\n    /**\r\n     * The step is equal to 10% of the input value, rounded down to the nearest power of 10.\r\n     * @returns Step as a string. Step is always at least 1 or larger.\r\n     */\r\n    public calculateMassInputStep(): string {\r\n        let step = (10 ** (Math.floor(Math.log10(this.selectedMass)) - 1));\r\n        return step < 1 ? \"1\" : step.toString();\r\n    }\r\n}","import { Canvas } from \"./canvas\";\r\nimport { Body2d, Simulation } from \"./gravity\";\r\nimport * as tsEssentials from \"./essentials\";\r\nimport { Vector2D } from \"./vector2d\";\r\nimport { AnimationSettings, CanvasClickAction, MouseBtnState } from \"./types\";\r\nimport { Inputs } from \"./inputs\";\r\n\r\nexport class Sandbox {\r\n    private _canvas: Canvas;\r\n    private _simulation: Simulation;\r\n    private _inputs: Inputs;\r\n    private _statusBar: { fields: HTMLSpanElement[] } = { fields: [] };\r\n    private _animationSettings: AnimationSettings;\r\n    private _running: boolean;\r\n    private _canvasMainMouseState: MouseBtnState = MouseBtnState.Up; // Refactor me: -> this is canvas stuff\r\n    private _canvasSecondaryMouseState: MouseBtnState = MouseBtnState.Up; // Refactor me: -> this is canvas stuff\r\n    private _lastMainMouseDownCanvasCoord: Vector2D = new Vector2D (0, 0); // Refactor me: -> this is canvas stuff\r\n    private _lastSecondaryMouseDownCanvasCoord: Vector2D = new Vector2D (0, 0); // Refactor me: -> this is canvas stuff\r\n    private _selectedCanvasClickAction: string = \"\";\r\n    //#region get, set, constr\r\n    constructor(canvas: Canvas) {\r\n        this._canvas = canvas;\r\n        this._simulation = new Simulation;\r\n        this._inputs = new Inputs();\r\n        this._animationSettings = { defaultScrollRate: 0.1, defaultZoomStep: 1, frameLength: 25, displayVectors: true, tracePaths: true };\r\n        this._running = false;\r\n    }\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n    get simulation() {\r\n        return this._simulation;\r\n    }\r\n    get inputs() {\r\n        return this._inputs;\r\n    }\r\n    get statusBar() {\r\n        return this._statusBar;\r\n    }\r\n    get animationSettings() {\r\n        return this._animationSettings;\r\n    }\r\n    get running() {\r\n        return this._running;\r\n    }\r\n    set running(running: boolean) {\r\n        this._running = running;\r\n    }\r\n    get canvasMainMouseState() {\r\n        return this._canvasMainMouseState;\r\n    }\r\n    set canvasMainMouseState(state: MouseBtnState) {\r\n        this._canvasMainMouseState = state;\r\n    }\r\n    get canvasSecondaryMouseState() {\r\n        return this._canvasSecondaryMouseState;\r\n    }\r\n    set canvasSecondaryMouseState(state: MouseBtnState) {\r\n        this._canvasSecondaryMouseState = state;\r\n    }\r\n    get lastMainMouseDownCanvasCoord() {\r\n        return this._lastMainMouseDownCanvasCoord;\r\n    }\r\n    set lastMainMouseDownCanvasCoord(coordinates: Vector2D) {\r\n        this._lastMainMouseDownCanvasCoord = coordinates;\r\n    }\r\n    get lastSecondaryMouseDownCanvasCoord() {\r\n        return this._lastSecondaryMouseDownCanvasCoord;\r\n    }\r\n    set lastSecondaryMouseDownCanvasCoord(coordinates: Vector2D) {\r\n        this._lastSecondaryMouseDownCanvasCoord = coordinates;\r\n    }\r\n    get selectedCanvasClickAction() {\r\n        return this._selectedCanvasClickAction;\r\n    }\r\n    set selectedCanvasClickAction(clickAction: string) {\r\n        this._selectedCanvasClickAction = clickAction;\r\n    }\r\n    //#endregion\r\n    //#region setup\r\n    /**\r\n     * generates an internal array of status-bar-field for later use.\r\n     * @param fieldIdBeginsWith the status bar's fields' ids have the same start followed by a number (starting at 1)\r\n     */\r\n    public initStatusBar(statusBar: HTMLDivElement) {\r\n        const statusBarFields = statusBar.querySelectorAll<HTMLSpanElement>(\".statusBarItem\");\r\n        statusBarFields.forEach(field => {\r\n            this.statusBar.fields.push(field);\r\n        });\r\n    }\r\n    public initCanvasAndSimulation(canvasDimensions: {x: number, y: number}) {\r\n        this.initCanvas(canvasDimensions.x, canvasDimensions.y);\r\n        this.initSimulation();\r\n    }\r\n    public initCanvas(width: number, height: number) {\r\n        this.canvas.visibleCanvas.width = width;\r\n        this.canvas.visibleCanvas.height = height;\r\n        this.animationSettings.displayVectors = tsEssentials.isChecked(\"cbxDisplayVectors\");\r\n        this.setStatusMessage(`Canvas dimension: ${width} * ${height}`, 5);\r\n        // offscreenCanvas = new OffscreenCanvas(visibleCanvas.clientWidth, visibleCanvas.clientHeight);\r\n        // offscreenCanvasCtx = offscreenCanvas.getContext(\"2d\")!;\r\n    }\r\n    public initSimulation() {\r\n        this.simulation.collisionDetection = tsEssentials.isChecked(\"cbxCollisions\");\r\n        this.simulation.elasticCollisions = tsEssentials.isChecked(\"cbxElasticCollisions\");\r\n    }\r\n    //#endregion\r\n    //#region events and settings\r\n    public resizeCanvas(width: number, height: number) {\r\n        this.canvas.resize(width, height);\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n    }\r\n    public canvasTouchStart(ev: TouchEvent) {\r\n        this.canvasMainMouseState = MouseBtnState.Down;\r\n    \r\n        switch (CanvasClickAction[this.selectedCanvasClickAction as keyof typeof CanvasClickAction]) {\r\n            case CanvasClickAction.None:\r\n                break;\r\n            case CanvasClickAction.AddBody:\r\n                ev.preventDefault();\r\n                this.lastMainMouseDownCanvasCoord = this.canvas.getCanvasTouchPosition(ev);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    public canvasTouchEnd(ev: TouchEvent) {\r\n        this.canvasMainMouseState = MouseBtnState.Up;\r\n        const touchPosition = this.canvas.getCanvasTouchEndPosition(ev);\r\n        if (touchPosition.x > this.canvas.visibleCanvas.width || touchPosition.y > this.canvas.visibleCanvas.height || touchPosition.x < 0 || touchPosition.y < 0) {\r\n            return;\r\n        }\r\n\r\n        switch (CanvasClickAction[this.selectedCanvasClickAction as keyof typeof CanvasClickAction]) {\r\n            case CanvasClickAction.None:\r\n                break;\r\n            case CanvasClickAction.AddBody:\r\n                const bodyBeingAdded = this.inputs.body2dFromInputs();    \r\n                if (bodyBeingAdded.mass <= 0) { break; }\r\n                const vel: Vector2D = this.simulation.calculateVelocityBetweenPoints(this.canvas.pointFromCanvasSpaceToSimulationSpace(this.lastMainMouseDownCanvasCoord), this.canvas.pointFromCanvasSpaceToSimulationSpace(touchPosition));\r\n                this.simulation.addObject(bodyBeingAdded, this.canvas.pointFromCanvasSpaceToSimulationSpace(touchPosition), vel);\r\n                this.setStatusMessage(`Number of Bodies: ${this.simulation.simulationState.length}`, 1);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (!this.running) {\r\n            this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n        }\r\n\r\n    }\r\n    public mainMouseDown(ev: MouseEvent) {\r\n        this.canvasMainMouseState = MouseBtnState.Down;\r\n        this.lastMainMouseDownCanvasCoord = this.canvas.getCanvasMousePosition(ev);\r\n    }\r\n    public mainMouseUp(ev: MouseEvent) {\r\n        if (this.canvasMainMouseState === MouseBtnState.Up) {\r\n            return;\r\n        }\r\n        this.canvasMainMouseState = MouseBtnState.Up;\r\n        const mousePosition: Vector2D = this.canvas.getCanvasMousePosition(ev);\r\n        \r\n        switch (CanvasClickAction[this.selectedCanvasClickAction as keyof typeof CanvasClickAction]) {\r\n            case CanvasClickAction.None:\r\n                break;\r\n            case CanvasClickAction.AddBody:\r\n                const bodyBeingAdded: Body2d = this.inputs.body2dFromInputs();\r\n                if (bodyBeingAdded.mass <= 0) { break; }\r\n                const vel: Vector2D = this.simulation.calculateVelocityBetweenPoints(this.canvas.pointFromCanvasSpaceToSimulationSpace(this.lastMainMouseDownCanvasCoord), this.canvas.pointFromCanvasSpaceToSimulationSpace(mousePosition));\r\n                this.simulation.addObject(bodyBeingAdded, this.canvas.pointFromCanvasSpaceToSimulationSpace(mousePosition), vel);\r\n                this.setStatusMessage(`Number of Bodies: ${this.simulation.simulationState.length}`, 1);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (!this.running) {\r\n            this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n        }\r\n    }\r\n    public secondaryMouseDown(ev: MouseEvent) {\r\n        this.canvasSecondaryMouseState = MouseBtnState.Down;\r\n        this.lastSecondaryMouseDownCanvasCoord = this.canvas.getCanvasMousePosition(ev);\r\n        console.log(this.lastSecondaryMouseDownCanvasCoord);\r\n    }\r\n    public secondaryMouseUp(ev: MouseEvent) {\r\n        ev.preventDefault();\r\n        this.canvasSecondaryMouseState = MouseBtnState.Up;\r\n    }\r\n    public mouseMoving(ev: MouseEvent) {\r\n        if (this.canvasSecondaryMouseState === MouseBtnState.Down) {\r\n            const currentPointerPosition = this.canvas.getCanvasMousePosition(ev);\r\n            const currentDisplacement = currentPointerPosition.subtract(this.lastSecondaryMouseDownCanvasCoord);\r\n            const displacementSimulationUnits = currentDisplacement.scale(this.canvas.canvasSpace.currentZoom);\r\n            this.canvas.moveCanvas(new Vector2D(-(displacementSimulationUnits.x), displacementSimulationUnits.y));\r\n            \r\n            this.lastSecondaryMouseDownCanvasCoord = currentPointerPosition;\r\n\r\n            if (!this.running) {\r\n                this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n            }\r\n        }\r\n    }\r\n    public massInputChanged(inputElement: HTMLInputElement) {\r\n        this.inputs.updateSelectedMass(inputElement);\r\n    }\r\n    //#endregion\r\n    //#region output/drawing\r\n    public runAnimation() {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n        this.running = true;\r\n        const loop = () => {\r\n            if (this.running) {\r\n                setTimeout(loop, this.animationSettings.frameLength);\r\n                this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n                this.updateSimulationStatusMessages();\r\n            }\r\n        };   \r\n        loop();\r\n    }\r\n    /**\r\n     * @param fieldIndexOrId number of field (starting at one) OR id of the field\r\n     */\r\n    public setStatusMessage(message: string, fieldIndexOrId?: number | string, append: boolean = false) {\r\n        let element: HTMLElement;\r\n        if (typeof fieldIndexOrId === \"number\") {\r\n            element = this.statusBar.fields[fieldIndexOrId - 1];\r\n        } else if (typeof fieldIndexOrId === \"string\") {\r\n            element = document.getElementById(fieldIndexOrId)!;\r\n        } else {\r\n            element = this.statusBar.fields[0];\r\n        }\r\n        \r\n        if (append) {\r\n            element!.innerHTML += message;\r\n        } else {\r\n            element!.innerHTML = message;\r\n        }\r\n    }\r\n    /**\r\n     * Updates the status fields for tick count and number of bodies\r\n     */\r\n    private updateSimulationStatusMessages() {\r\n        this.setStatusMessage(`Simulation Tick: ${this.simulation.tickCount}`, 2);\r\n        this.setStatusMessage(`Number of Bodies: ${this.simulation.simulationState.length}`, 1);\r\n    }\r\n    //#endregion\r\n    //#region interaction\r\n    /**\r\n     * Calculates the distance of the screen dimension (h/v) that one scroll step will move (ie. 0.1 will scroll 10% of the width/height in a horizontal/vertical direction)\r\n     * @param orientation \"horizontal\" | \"vertical\"\r\n     * @param rate a number *0 < rate < 1* - defaults to animationSettings.defaultScrollRate \r\n     * @returns the distance in simulationUnits\r\n     */\r\n    private defaultScrollDistance(orientation: \"horizontal\" | \"vertical\", rate?: number): number {\r\n        if (rate === undefined) { rate = this.animationSettings.defaultScrollRate; }\r\n        switch (orientation) {\r\n            case \"horizontal\":\r\n                return this.canvas.visibleCanvas.width * rate * this.canvas.canvasSpace.currentZoom;\r\n            case \"vertical\":\r\n                return this.canvas.visibleCanvas.height * rate * this.canvas.canvasSpace.currentZoom;\r\n        }\r\n    }\r\n    public moveCanvasRight(distance?: number) {\r\n        if (distance === undefined) {\r\n            distance = this.defaultScrollDistance(\"horizontal\"); // in simulationUnits\r\n        }\r\n        this.canvas.moveCanvasRight(distance);\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n    }\r\n    public moveCanvasLeft(distance?: number) {\r\n        if (distance === undefined) {\r\n            distance = this.defaultScrollDistance(\"horizontal\"); // in simulationUnits\r\n        }\r\n        this.canvas.moveCanvasLeft(distance);\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n    }\r\n    public moveCanvasUp(distance?: number) {\r\n        if (distance === undefined) {\r\n            distance = this.defaultScrollDistance(\"vertical\"); // in simulationUnits\r\n        }\r\n        this.canvas.moveCanvasUp(distance);\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n    }\r\n    public moveCanvasDown(distance?: number) {\r\n        if (distance === undefined) {\r\n            distance = this.defaultScrollDistance(\"vertical\"); // in simulationUnits\r\n        }\r\n        this.canvas.moveCanvasDown(distance);\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n    }\r\n    public zoomOut(zoomCenter: Vector2D, zoomStep?: number) {\r\n        if (zoomStep === undefined) {\r\n            zoomStep = this.animationSettings.defaultZoomStep;\r\n        }\r\n        this.canvas.zoomOut(zoomCenter, zoomStep);\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n        this.setStatusMessage(`Zoom: ${this.canvas.canvasSpace.currentZoom} (m per pixel)`, 4);\r\n    }\r\n    public zoomIn(zoomCenter: Vector2D, zoomStep?: number) {\r\n        if (zoomStep === undefined) {\r\n            zoomStep = this.animationSettings.defaultZoomStep;\r\n        }\r\n        this.canvas.zoomIn(zoomCenter, zoomStep);\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n        this.setStatusMessage(`Zoom: ${this.canvas.canvasSpace.currentZoom} (m per pixel)`, 4);\r\n    }\r\n    public advanceSimulation() {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n        this.simulation.advanceTick();\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n        this.updateSimulationStatusMessages();\r\n    }\r\n    private runSimulation() {\r\n        if (!this.running) {\r\n            document.getElementById(\"btnToggleSim\")!.innerHTML = \"Pause\";\r\n            this.simulation.run();\r\n            this.runAnimation();\r\n        }\r\n    }\r\n    public toggleSimulation() {\r\n        if (this.running) {\r\n            this.stop();\r\n        } else {\r\n            this.run();\r\n        }\r\n    }\r\n    public reset() {\r\n        this.simulation.reset();\r\n        this.canvas.redrawSimulationState(this.simulation.simulationState, this.animationSettings.displayVectors);\r\n        this.updateSimulationStatusMessages();\r\n    }\r\n    public run() {\r\n        this.runSimulation();\r\n        this.runAnimation();\r\n    }\r\n    public stop() {\r\n        this.running = false;\r\n        this.simulation.pause();\r\n        document.getElementById(\"btnToggleSim\")!.innerHTML = \"Play\";\r\n    }\r\n    //#endregion\r\n}","import { Vector2D } from \"./vector2d\";\r\nimport { MouseBtnState } from \"./types\";\r\nimport { Canvas } from \"./canvas\";\r\nimport * as tsEssentials from \"./essentials\";\r\nimport { Sandbox } from \"./sandbox\";\r\nimport * as c from \"../const\";\r\n\r\nlet sandbox: Sandbox;\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", initialize);\r\nfunction initialize() {\r\n    document.removeEventListener(\"DOMContentLoaded\", initialize);\r\n    registerEvents();\r\n\r\n    initializeSandbox();\r\n    initializeSettingsFromUI();\r\n\r\n    sandbox.run();\r\n}\r\nfunction initializeSandbox() {\r\n    sandbox = new Sandbox(new Canvas(<HTMLCanvasElement>document.getElementById(c.CANVAS_ID)));\r\n    sandbox.initStatusBar(<HTMLDivElement>(document.getElementById(c.STATUS_BAR_ID)));\r\n    sandbox.initCanvasAndSimulation({x: window.innerWidth, y: window.innerHeight});\r\n}\r\nfunction initializeSettingsFromUI() {\r\n    // REFACTOR ME: create a proper UI(+settings) object\r\n    sandbox.selectedCanvasClickAction = (document.querySelector('input[name=\"radioBtnMouseAction\"]:checked') as HTMLInputElement).value;\r\n    \r\n    (<HTMLInputElement>document.getElementById(\"cbxElasticCollisions\")).disabled = !sandbox.simulation.collisionDetection;\r\n\r\n    if ((<HTMLInputElement>document.getElementById(\"cbxDisplayVectors\"))?.checked) {\r\n        sandbox.setStatusMessage(\"Green: acceleration - Red: velocity\", 3);\r\n    } else {\r\n        sandbox.setStatusMessage(\"\", 3);\r\n    }\r\n\r\n    setG(Number((<HTMLInputElement>document.getElementById(\"rangeG\")).value));\r\n}\r\nfunction registerEvents() {\r\n    document.getElementById(\"btnToggleSim\")?.addEventListener(\"click\", toggleSimulationClicked);\r\n    document.getElementById(\"btnNextStep\")?.addEventListener(\"click\", nextStepClicked);\r\n    document.getElementById(\"btnResetSim\")?.addEventListener(\"click\", resetClicked);\r\n    document.getElementById(\"btnZoomOut\")?.addEventListener(\"click\", zoomOutClicked);\r\n    document.getElementById(\"btnZoomIn\")?.addEventListener(\"click\", zoomInClicked);\r\n    document.getElementById(\"btnScrollLeft\")?.addEventListener(\"click\", scrollLeftClicked);\r\n    document.getElementById(\"btnScrollRight\")?.addEventListener(\"click\", scrollRightClicked);\r\n    document.getElementById(\"btnScrollUp\")?.addEventListener(\"click\", scrollUpClicked);\r\n    document.getElementById(\"btnScrollDown\")?.addEventListener(\"click\", scrollDownClicked);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"mousedown\", canvasMouseDown);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"mouseup\", canvasMouseUp);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"mouseout\", canvasMouseOut);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"mousemove\", canvasMouseMove);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"touchstart\", canvasTouchStart);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"touchend\", canvasTouchEnd);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"touchmove\", canvasTouchMove);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"wheel\", canvasMouseWheel);\r\n    document.getElementById(c.CANVAS_ID)?.addEventListener(\"contextmenu\", (ev) => {ev.preventDefault()});\r\n    document.getElementById(c.MASS_INPUT_ID)?.addEventListener(\"change\", massInputChanged);\r\n    document.getElementById(\"cbxDisplayVectors\")?.addEventListener(\"change\", cbxDisplayVectorsChanged);\r\n    document.getElementById(\"cbxCollisions\")?.addEventListener(\"change\", cbxCollisionsChanged);\r\n    document.getElementById(\"cbxElasticCollisions\")?.addEventListener(\"change\", cbxElasticCollisionsChanged);\r\n    document.getElementById(\"rangeG\")?.addEventListener(\"input\", rangeInputGChanged);\r\n    document.getElementById(\"numberG\")?.addEventListener(\"input\", numberInputGChanged);\r\n    document.querySelectorAll('input[name=\"radioBtnMouseAction\"]').forEach((radioButton) => {\r\n        radioButton.addEventListener('change', radioBtnMouseActionChanged);\r\n      });\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n}\r\nfunction zoomOutClicked(this: HTMLElement, ev: MouseEvent) {\r\n    const zoomCenter = new Vector2D(sandbox.canvas.visibleCanvas.width / 2, sandbox.canvas.visibleCanvas.height / 2)\r\n    sandbox.zoomOut(zoomCenter);\r\n}\r\nfunction zoomInClicked(this: HTMLElement, ev: MouseEvent) {\r\n    const zoomCenter = new Vector2D(sandbox.canvas.visibleCanvas.width / 2, sandbox.canvas.visibleCanvas.height / 2)\r\n    sandbox.zoomIn(zoomCenter);\r\n}\r\nfunction scrollLeftClicked(this: HTMLElement, ev: MouseEvent) {\r\n    sandbox.moveCanvasLeft();\r\n}\r\nfunction scrollRightClicked(this: HTMLElement, ev: MouseEvent) {\r\n    sandbox.moveCanvasRight();\r\n}\r\nfunction scrollUpClicked(this: HTMLElement, ev: MouseEvent) {\r\n    sandbox.moveCanvasUp();\r\n}\r\nfunction scrollDownClicked(this: HTMLElement, ev: MouseEvent) {\r\n    sandbox.moveCanvasDown();\r\n}\r\nfunction massInputChanged(this: HTMLElement) {\r\n    sandbox.massInputChanged(this as HTMLInputElement);\r\n}\r\nfunction cbxCollisionsChanged(event: Event) {\r\n    const checked = tsEssentials.isChecked(event.target as HTMLInputElement);\r\n    const cbxElastic: HTMLInputElement = <HTMLInputElement>document.getElementById(\"cbxElasticCollisions\");\r\n    const elasticChecked = tsEssentials.isChecked(cbxElastic);\r\n    sandbox.simulation.collisionDetection = checked;\r\n    sandbox.simulation.elasticCollisions = elasticChecked;\r\n\r\n    cbxElastic.disabled = !checked;\r\n}\r\nfunction cbxElasticCollisionsChanged(event: Event) {\r\n    const checked = tsEssentials.isChecked(event.target as HTMLInputElement);\r\n    sandbox.simulation.elasticCollisions = checked;\r\n}\r\nfunction cbxDisplayVectorsChanged(event: Event) {\r\n    const checkbox = event.target as HTMLInputElement;\r\n    const displayVectors = checkbox ? checkbox.checked : false;\r\n    sandbox.animationSettings.displayVectors = displayVectors;\r\n    \r\n    if (displayVectors) {\r\n        sandbox.setStatusMessage(\"Green: acceleration - Red: velocity\", 3);\r\n    } else {\r\n        sandbox.setStatusMessage(\"\", 3);\r\n    }\r\n\r\n    if (!sandbox.running) {\r\n        sandbox.canvas.redrawSimulationState(sandbox.simulation.simulationState, sandbox.animationSettings.displayVectors);\r\n    }\r\n}\r\nfunction radioBtnMouseActionChanged(event: Event): void {\r\n    const target = event.target as HTMLInputElement;\r\n    if (target && target.type === 'radio') {\r\n        sandbox.selectedCanvasClickAction = target.value;\r\n    }\r\n}\r\nfunction toggleSimulationClicked(this: HTMLElement, ev: MouseEvent) {\r\n    sandbox.toggleSimulation();\r\n    if (sandbox.running) {\r\n        (<HTMLInputElement>document.getElementById(\"btnNextStep\"))!.disabled = true;\r\n    } else {\r\n        (<HTMLInputElement>document.getElementById(\"btnNextStep\"))!.disabled = false;\r\n    }\r\n}\r\nfunction rangeInputGChanged(this: HTMLElement, ev: Event) {\r\n    const newG: string = (<HTMLInputElement>this).value;\r\n    (<HTMLInputElement>document.getElementById(\"numberG\"))!.value = newG;\r\n    setG(Number(newG));\r\n}\r\nfunction numberInputGChanged(this: HTMLElement, ev: Event) {\r\n    const newG: string = (<HTMLInputElement>this).value;\r\n    (<HTMLInputElement>document.getElementById(\"rangeG\"))!.value = newG;\r\n    setG(Number(newG));\r\n}\r\nfunction setG(g: number) {\r\n    if (isNaN(g) || g < c.MIN_G || g > c.MAX_G) {\r\n        g = c.DEFAULT_G;\r\n    }\r\n    sandbox.simulation.g = g;\r\n}\r\nfunction nextStepClicked() {\r\n    sandbox.advanceSimulation();\r\n}\r\nfunction resetClicked() {\r\n    sandbox.reset();\r\n}\r\nfunction canvasMouseDown(this: HTMLElement, ev: MouseEvent) {\r\n    if (ev.button === 0) {\r\n        sandbox.mainMouseDown(ev);\r\n    } else if (ev.button === 1) {\r\n        // prevent scroll-symbol\r\n        ev.preventDefault();\r\n    } else if (ev.button === 2) {\r\n        sandbox.secondaryMouseDown(ev);\r\n    }\r\n}\r\nfunction canvasMouseMove(this: HTMLElement, ev: MouseEvent) {\r\n    sandbox.mouseMoving(ev);\r\n}\r\nfunction canvasMouseUp(this: HTMLElement, ev: MouseEvent) {\r\n    if (ev.button === 0) {\r\n        sandbox.mainMouseUp(ev);\r\n    } else if (ev.button === 2) {\r\n        sandbox.secondaryMouseUp(ev);\r\n    }\r\n}\r\nfunction canvasMouseOut(this: HTMLElement, ev: MouseEvent) {\r\n    sandbox.canvasMainMouseState = MouseBtnState.Up;\r\n    sandbox.canvasSecondaryMouseState = MouseBtnState.Up;\r\n}\r\nfunction canvasTouchStart(this: HTMLElement, ev: TouchEvent) {\r\n    sandbox.canvasTouchStart(ev);\r\n}\r\nfunction canvasTouchMove(this: HTMLElement, ev: TouchEvent) {\r\n    //sandbox.canvasTouchMove(ev);\r\n}\r\nfunction canvasTouchEnd(this: HTMLElement, ev: TouchEvent) {\r\n    sandbox.canvasTouchEnd(ev);\r\n}\r\nfunction resizeCanvas(this: Window, ev: UIEvent) {\r\n    sandbox.resizeCanvas(this.innerWidth, this.innerHeight);\r\n    sandbox.setStatusMessage(`Canvas dimension: ${this.innerWidth} * ${this.innerHeight}`, 5);\r\n}\r\nfunction canvasMouseWheel(this: HTMLElement, ev: WheelEvent) {\r\n    // don't resize the entire page\r\n    ev.preventDefault();\r\n    \r\n    const canvasRect = this.getBoundingClientRect();\r\n    const cursorPos = new Vector2D(ev.clientX - canvasRect.left, ev.clientY - canvasRect.top);\r\n    \r\n    if (ev.deltaY < 0) {\r\n        sandbox.zoomIn(cursorPos);\r\n    } else if (ev.deltaY > 0) {\r\n        sandbox.zoomOut(cursorPos);\r\n    }\r\n}\r\n"],"names":["Vector2D","x","y","__publicField","vectors","previous","current","v","scalar","magnitude","array","reflectionSurface","axis","dotAxis","projection","CanvasClickAction","MouseBtnState","Canvas","visibleCanvas","canvas","context","canvasSpace","width","height","position","direction","color","endPosition","objectStates","objectState","body","visibleRadius","object","displayVectors","simVector","shifted","canvasVector","simulationVector","newOrigin","displacement","originPosition","distance","zoomCenter","zoomStep","shiftOrigin","newZoom","event","rect","touch","isNumeric","s","getInputValue","input","inputElement","getInputNumber","inputValue","isChecked","checkbox","MASS_INPUT_ID","CANVAS_ID","STATUS_BAR_ID","DEFAULT_G","MIN_G","MAX_G","_Body2d","mass","movable","radius","newMass","newRadius","affected","c","Body2d","Simulation","c.DEFAULT_G","running","tickCount","collisionDetection","elasticCollisions","g","bodyOrObject","velocity","index","runSimulationStep","toCoordinate","fromCoordinate","timeFrameInSeconds","forces","newAcceleration","i","j","forceOnI","forceOnJ","dt","objectStateI","objectStateJ","netForceBetweenBodies","distanceIJ","index1","index2","state1","state2","totalMomentum","totalMass","resultingVelocity","changeObject","removeIndex","body1","body2","restitution","normalizedDisplacement","velocityAlongDisplacement","impulseScalar","deltaV1","deltaV2","objectState1","objectState2","normalDisplacement","targetDistance","totalMoveDistance","moveBody1","moveBody2","Inputs","tsEssentials.getInputNumber","tsEssentials.isChecked","tsEssentials.isNumeric","step","Sandbox","state","coordinates","clickAction","statusBar","field","canvasDimensions","ev","touchPosition","bodyBeingAdded","vel","mousePosition","currentPointerPosition","displacementSimulationUnits","loop","message","fieldIndexOrId","append","element","orientation","rate","sandbox","initialize","registerEvents","initializeSandbox","initializeSettingsFromUI","c.CANVAS_ID","c.STATUS_BAR_ID","_a","setG","toggleSimulationClicked","_b","nextStepClicked","_c","resetClicked","_d","zoomOutClicked","_e","zoomInClicked","_f","scrollLeftClicked","_g","scrollRightClicked","_h","scrollUpClicked","_i","scrollDownClicked","_j","canvasMouseDown","_k","canvasMouseUp","_l","canvasMouseOut","_m","canvasMouseMove","_n","canvasTouchStart","_o","canvasTouchEnd","_p","canvasTouchMove","_q","canvasMouseWheel","_r","_s","c.MASS_INPUT_ID","massInputChanged","_t","cbxDisplayVectorsChanged","_u","cbxCollisionsChanged","_v","cbxElasticCollisionsChanged","_w","rangeInputGChanged","_x","numberInputGChanged","radioButton","radioBtnMouseActionChanged","resizeCanvas","checked","cbxElastic","elasticChecked","target","newG","c.MIN_G","c.MAX_G","canvasRect","cursorPos"],"mappings":"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"}