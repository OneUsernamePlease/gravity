{"version":3,"file":"index-d44d2Q_g.js","sources":["../../../MyPackages/tcellib-vectors/dist/Vector2D/vector2d.js","../../src/scripts/gravity.ts","../../src/scripts/essentials.ts","../../src/scripts/main.ts"],"sourcesContent":["export class Vector2D {\n    constructor(x, y) {\n        if (x === undefined) {\n            x = 0;\n        }\n        if (y === undefined) {\n            y = 0;\n        }\n        this.x = x;\n        this.y = y;\n    }\n    toString() {\n        return `x: ${this.x}, y: ${this.y}`;\n    }\n    static add(...vectors) {\n        return vectors.reduce((previous, current) => {\n            return { x: previous.x + current.x, y: previous.y + current.y };\n        }, { x: 0, y: 0 });\n    }\n    /**\n     * @returns v1 - v2\n     */\n    static subtract(v1, v2) {\n        return { x: v1.x - v2.x, y: v1.y - v2.y };\n    }\n    static scale(v, scalar) {\n        return { x: v.x * scalar, y: v.y * scalar };\n    }\n    static dotProduct(v1, v2) {\n        return v1.x * v2.x + v1.y * v2.y;\n    }\n    static magnitude(v) {\n        return Math.sqrt(v.x * v.x + v.y * v.y);\n    }\n    static normalize(v) {\n        const mag = this.magnitude(v);\n        return mag === 0 ? { x: 0, y: 0 } : this.scale(v, 1 / mag);\n    }\n    /**\n     * @param v1 Vector2D\n     * @param v2 Vector2D\n     * @returns Distance from v1 to v2\n     */\n    static distance(v1, v2) {\n        return Math.sqrt((v2.x - v1.x) ** 2 + (v2.y - v1.y) ** 2);\n    }\n    /**\n     * returns a vector pointing from v1 to v2\n     */\n    static displacementVector(v1, v2) {\n        return this.subtract(v2, v1);\n    }\n    static hadamardProduct(v1, v2) {\n        return { x: v1.x * v2.x, y: v1.y * v2.y };\n    }\n}\n","import { Vector2D } from \"tcellib-vectors\";\r\n\r\nexport class Body2d {\r\n    private _mass!: number;\r\n    private _radius!: number;\r\n    private _color!: string;\r\n    private _movable!: boolean; //whether the body will move from effects of gravity\r\n    static defaultDensity = 1;\r\n\r\n    //#region constructor, get, set\r\n    constructor(mass: number, movable?: boolean, color?: string, radius?: number)  {\r\n        if (radius === undefined) { radius = ((3 * mass)/(4 * Math.PI * Body2d.defaultDensity)) ** (1/3); }\r\n        if (color === undefined) { color = \"white\" }\r\n        if (movable === undefined) { movable = true; }\r\n        this.mass = mass;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.movable = movable;     \r\n    }\r\n    public get mass() {\r\n        return this._mass;\r\n    }\r\n    public set mass(newMass: number) {\r\n        this._mass = newMass;\r\n    }\r\n    public get radius() {\r\n        return this._radius;\r\n    }\r\n    public set radius(newRadius: number) {\r\n        this._radius = newRadius;\r\n    }\r\n    public get movable() {\r\n        return this._movable;\r\n    }\r\n    public set movable(affected: boolean) {\r\n        this._movable = affected\r\n    }   \r\n    public get color() : string {\r\n        return this._color\r\n    }\r\n    public set color(c: string) {\r\n        if (!(CSS.supports(\"color\", c))) {\r\n            c = \"white\";\r\n        }\r\n        this._color = c;\r\n    } \r\n    //#endregion\r\n}\r\nexport interface ObjectState {\r\n    body: Body2d, \r\n    position: Vector2D,\r\n    /**\r\n     * simulationUnits (meter?) per second\r\n     */\r\n    velocity: Vector2D,\r\n    acceleration: Vector2D\r\n}\r\nexport class Simulation {\r\n    private _objectStates: ObjectState[];\r\n    public _running: boolean;\r\n    public _tickCount: number;\r\n    private _tickLength: number;\r\n    private _collisionDetection: boolean;\r\n    private _g: number; //gravitational constant\r\n    private readonly gravityLowerBounds: number = 1; //force calculations for distances lower than this number are skipped\r\n    //#region constr, get, set\r\n    constructor() { \r\n        this._objectStates = [];\r\n        this._running = false;\r\n        this._tickCount = 0;\r\n        this._tickLength = 10; //ms\r\n        this._collisionDetection = false;\r\n        this._g = 100;\r\n    }\r\n    public get objectStates() {\r\n        return this._objectStates;\r\n    }\r\n    public set objectStates(objectState: ObjectState[]) {\r\n        this._objectStates = objectState;\r\n    }\r\n    public get running() {\r\n        return this._running;\r\n    }\r\n    public set running(running: boolean) {\r\n        this._running = running;\r\n    }\r\n    public get tickCount() {\r\n        return this._tickCount;\r\n    }\r\n    public set tickCount(tickCount: number) {\r\n        this._tickCount = tickCount;\r\n    }\r\n    public get tickLength() {\r\n        return this._tickLength;\r\n    }\r\n    public set tickLength(t: number) {\r\n        this._tickLength = t;\r\n    }\r\n    public get collisionDetection() {\r\n        return this._collisionDetection;\r\n    }\r\n    public set collisionDetection(collisionDetection: boolean) {\r\n        this._collisionDetection = collisionDetection;\r\n    }\r\n    public get g() {\r\n        return this._g;\r\n    }\r\n    public set g(g: number) {\r\n        this._g = Math.max(g, Number.MIN_VALUE);\r\n    }\r\n//#endregion\r\n    public addObject(objectState: ObjectState): number {\r\n        if (!objectState.body.movable) {\r\n            objectState.velocity = new Vector2D(0, 0);\r\n            objectState.acceleration = new Vector2D(0, 0);\r\n        }\r\n        this.objectStates.push(objectState);\r\n        return this.objectStates.length;\r\n    }\r\n    public clearObjects() {\r\n        this.objectStates = [];\r\n    }\r\n    public pause() {\r\n        this.running = false;\r\n    }\r\n    public nextState() {\r\n        //calculate new accelerations vectors and update objectStates accordingly\r\n        this.updateAccelerationVectors();\r\n        \r\n        //update position and velocity arising therefrom\r\n        this.objectStates.forEach(objectState => {\r\n            this.updateVelocityAndPosition(objectState)\r\n        });\r\n        \r\n        this.tickCount++;\r\n    }\r\n    public updateAccelerationVectors() {\r\n        const forces: Map<number, Vector2D> = new Map(); //to keep track of the resulting force (sum of forces) on each body (by each other body) in objectStates[]\r\n        \r\n        //calculate forces on each body\r\n        for (let i = 0; i < this.objectStates.length; i++) {\r\n            for (let j = i+1; j < this.objectStates.length; j++) {\r\n                const forceOnI = this.calculateForceBetweenBodies(i, j);\r\n                const forceOnJ = Vector2D.scale(forceOnI, -1); //force on j = (-1) * (force on i) -- opposite direction\r\n\r\n                //Update the force on both bodies\r\n                forces.set(i, Vector2D.add(forces.get(i) || new Vector2D(0, 0), forceOnI));\r\n                forces.set(j, Vector2D.add(forces.get(j) || new Vector2D(0, 0), forceOnJ));\r\n            }\r\n        }\r\n\r\n        //update acceleration\r\n        this.objectStates.forEach((objectState, index) => {\r\n            const totalForceOnBody = forces.get(index);\r\n            let newAcceleration = (totalForceOnBody !== undefined) ? (totalForceOnBody) : (new Vector2D(0, 0));\r\n            newAcceleration = Vector2D.scale(newAcceleration, 1 / objectState.body.mass);\r\n            objectState.acceleration = newAcceleration;\r\n        });\r\n    }\r\n    /**\r\n     * Calculates the next **position** and **velocity** of the object in state, and updates state accordingly.\r\n     * @param state *ObjectState* containing the body\r\n     */\r\n    public updateVelocityAndPosition(objectState: ObjectState) {\r\n        const dt = this.tickLength / 1000;\r\n        if (!objectState.body.movable) { return; }\r\n        //update velocity based on acceleration: v = v + a * dt\r\n        objectState.velocity = Vector2D.add(objectState.velocity, Vector2D.scale(objectState.acceleration, dt));\r\n\r\n        //update position based on velocity: x = x + v * dt\r\n        objectState.position = Vector2D.add( objectState.position, Vector2D.scale(objectState.velocity, dt));\r\n    }\r\n    /**\r\n     * Calculates the force-vector between the bodies in objectStates at index [i] and [j]\r\n     * @returns a vector representing the force applied ***to*** body at ***objectStates[i]***\r\n     */\r\n    public calculateForceBetweenBodies(i: number, j: number): Vector2D {\r\n        const objectStateI = this.objectStates[i];\r\n        const objectStateJ = this.objectStates[j];\r\n\r\n        const distance = Vector2D.distance(objectStateI.position, objectStateJ.position);\r\n        if (distance < this.gravityLowerBounds || distance === 0) //if the bodies are too close, skip the calculation\r\n            { return new Vector2D(0, 0); } \r\n        const netForceBetweenBodies: number = this.g * ((objectStateI.body.mass * objectStateJ.body.mass)/(distance * distance)); //net force between bodies as scalar\r\n        const unitVectorIToJ = Vector2D.normalize(Vector2D.subtract(objectStateJ.position, objectStateI.position)); //normalized vector from I to J\r\n        return Vector2D.scale(unitVectorIToJ, netForceBetweenBodies); //return force-vector applied to i, which is (unitVector from I to J) multiplied by (netForce)\r\n    }\r\n    public run() {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n        this.running = true;\r\n\r\n        const runSimulationStep = () => {\r\n            if (this.running) {\r\n                setTimeout(runSimulationStep, this.tickLength);\r\n                this.nextState();\r\n                //this.log(\"running simulation step \" + this.tickCount);\r\n            }\r\n        };\r\n        runSimulationStep();\r\n    }\r\n}\r\n","\r\n    /*\r\n    Just Some functions\r\n    (hopefully moderately helpful)\r\n    */\r\n    \r\n    //#region math stuff\r\n    /**\r\n     * empty string is NOT considered numeric\r\n     * @param s the string to be examined\r\n     * @returns true if s is a valid number, returns false otherwise\r\n     */\r\n    export function isNumeric(s: string): boolean {\r\n        s = s.trim();\r\n        return (!isNaN(+s)) && s.length !== 0;\r\n    }\r\n    /**\r\n     * @returns \"\", if d is a non-numeric string\r\n     */\r\n    export function decimalToHex(d: string | number): string {\r\n        if (typeof(d) === \"string\")  {\r\n            if (isNumeric(d)) {\r\n                d = parseFloat(d);\r\n            } else {\r\n                return \"\";\r\n            }\r\n        }\r\n        return d.toString(16);\r\n    }\r\n    /**\r\n     * converts a hexadecimal-number-string to a decimal number and returns it\r\n     * @returns 0 if hex is not a valid hexadecimal number\r\n     */\r\n    export function hexToDecimal(hex: string): number {\r\n        const prefix = \"0x\"\r\n        if (!(hex.startsWith(prefix))) {\r\n            hex = prefix + hex;\r\n        }\r\n        const num: number = Number(hex);\r\n        const valid = !isNaN(num);\r\n        return valid ? num : 0;\r\n    }\r\n    /**\r\n     * ensures min <= n <= max (Inclusive!)\r\n     * @param n number to test against upper and lower bounds\r\n     * @param min the lowest allowed value for n\r\n     * @param max the highest allowed value for n\r\n     * @returns n if n satisfies min <= n <= max, otherwise min or max are returned\r\n     */\r\n    export function ensureNumberInRange(n: number, min: number, max: number): number {\r\n        return Math.max(min, Math.min(n, max))\r\n    }\r\n    //#endregion\r\n    \r\n    //#region string stuff\r\n    /**\r\n     * Removes all occurrences of charToRemove from the beginning of str\r\n     * @param str the string to be modified\r\n     * @param charToRemove ***optional*** If no value is provided the first character of str is used.\r\n     */\r\n    export function removeLeadingChar(str: string, charToRemove?: string): string {\r\n        if (str.length < 1) { return \"\"; }\r\n        if (charToRemove === undefined) {\r\n            charToRemove = str[0];\r\n        }\r\n\r\n        while (str.startsWith(charToRemove)) {\r\n            str = str.slice(charToRemove.length);\r\n        }\r\n        return str;\r\n    }\r\n    //#endregion\r\n\r\n    //#region input stuff\r\n    export function getInputValue(inputId: string): string {\r\n        let input = document.getElementById(inputId);\r\n        return (input instanceof HTMLInputElement) ? (input as HTMLInputElement).value.trim() : \"\";\r\n    }\r\n    /**\r\n     * @param inputId elementID for input-element\r\n     * @returns element's value attribute; 0 if value is not numeric\r\n     */\r\n    export function getInputNumber(inputId: string): number {\r\n        let inputValue: string = getInputValue(inputId);\r\n        return isNumeric(inputValue) ? +inputValue : 0;\r\n    }\r\n    /**\r\n     * @param inputId id for a checkable input (radioButton, checkbox)\r\n     * @returns true if checked, false otherwise\r\n     */\r\n    export function isChecked(inputId: string): boolean {\r\n        const checkbox = document.getElementById(inputId) as HTMLInputElement;\r\n        return checkbox ? checkbox.checked : false;\r\n    }\r\n    //#endregion","import { InferCustomEventPayload } from \"vite\";\r\nimport { Body2d, Simulation } from \"./gravity\";\r\nimport { Vector2D } from \"tcellib-vectors\";\r\nimport * as tsEssentials from \"./essentials\";\r\n\r\ninterface CanvasSpace { \r\n    //use this to transform simulationSpace to canvasSpace and back\r\n    origin: Vector2D, //the canvas' origin in simulation space\r\n    zoomFactor: number, //simulationUnits (meter) per canvasUnit\r\n    orientationY: number; //in practice this is -1, as the y-axis of the canvas is in the opposite direction of the simulation\r\n}\r\nenum CvsClickAction {\r\n    None = 0,\r\n    AddBody = 1,\r\n    ScrollCvs = 2,\r\n}\r\nenum MouseBtnState {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\n\r\n//let offscreenCanvas: OffscreenCanvas; //use this in a worker thread to render or draw on, then transfer content to the visible html-canvas\r\nlet visibleCanvas: HTMLCanvasElement;\r\n//let offscreenCanvasCtx: OffscreenCanvasRenderingContext2D; //coming soon\r\nlet visibleCanvasCtx: CanvasRenderingContext2D;\r\nlet statusBar: { fields: HTMLElement[] } = { fields: [] };\r\nlet simState: Simulation;\r\nlet canvasSpace: CanvasSpace;\r\nlet frameLength = 25; //ms\r\nlet animationRunning = false; //set to true while the sim is running\r\nlet zoomStep = 1; //simUnits that get added to or subtracted from one canvasUnit in a zoom steps\r\nlet defaultScrollRate = 0.1; //when scrolling, canvas is moved by this percentage of its height/width in the corresponding direction\r\n\r\nlet selectedMassInput: number;\r\nlet tracePaths = false;\r\nlet displayVectors: boolean;\r\nlet cvsLMouseState: MouseBtnState = MouseBtnState.Up;\r\nlet mainMouseBtnDownLastCvsPosition: Vector2D = new Vector2D (0, 0); //the position on the canvas, where the mouse's main button's last down-event happened\r\nlet selectedCvsClickAction: string;\r\n//#region page stuff\r\ndocument.addEventListener(\"DOMContentLoaded\", initialize);\r\nfunction initialize() {\r\n    initStatusBar();\r\n    registerEvents();\r\n    initCanvas(1280, 720);\r\n    canvasSpace = {origin: {x: 0, y: 0}, zoomFactor: 1, orientationY: -1};\r\n    displayVectors = tsEssentials.isChecked(\"cbxDisplayVectors\");\r\n    selectedMassInput = tsEssentials.getInputNumber(\"massInput\");\r\n    (<HTMLInputElement>document.getElementById(\"massInput\")!).step = calculateMassInputStep();\r\n    simState = new Simulation();\r\n    selectedCvsClickAction = (document.querySelector('input[name=\"cvsRadioBtnMouseAction\"]:checked') as HTMLInputElement).value;\r\n    document.removeEventListener(\"DOMContentLoaded\", initialize);\r\n}\r\nfunction registerEvents() {\r\n    document.getElementById(\"cvsBtnStartSim\")?.addEventListener(\"click\", startNewSimulation);\r\n    document.getElementById(\"cvsBtnToggleSim\")?.addEventListener(\"click\", toggleSimulation);\r\n    document.getElementById(\"cvsBtnResetSim\")?.addEventListener(\"click\", resetSimulation);\r\n    document.getElementById(\"cvsBtnZoomOut\")?.addEventListener(\"click\", zoomOut);\r\n    document.getElementById(\"cvsBtnZoomIn\")?.addEventListener(\"click\", zoomIn);\r\n    document.getElementById(\"cvsBtnScrollLeft\")?.addEventListener(\"click\", scrollLeft);\r\n    document.getElementById(\"cvsBtnScrollRight\")?.addEventListener(\"click\", scrollRight);\r\n    document.getElementById(\"cvsBtnScrollUp\")?.addEventListener(\"click\", scrollUp);\r\n    document.getElementById(\"cvsBtnScrollDown\")?.addEventListener(\"click\", scrollDown);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"mousedown\", cvsMouseDownHandler);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"mouseup\", cvsMouseUpHandler);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"mouseout\", cvsMouseOutHandler);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"mousemove\", cvsMouseMoveHandler);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"touchstart\", cvsTouchStartHandler);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"touchend\", cvsTouchEndHandler);\r\n    document.getElementById(\"massInput\")?.addEventListener(\"change\", massInputChangeHandler);\r\n    document.getElementById(\"cbxDisplayVectors\")?.addEventListener(\"change\", cbxDisplayVectorsHandler);\r\n    document.querySelectorAll('input[name=\"cvsRadioBtnMouseAction\"]').forEach((radioButton) => {\r\n        radioButton.addEventListener('change', radioBtnMouseActionChangeHandler);\r\n      });\r\n}\r\nfunction massInputChangeHandler(this: HTMLElement) {\r\n    const element = this as HTMLInputElement;\r\n    const inputValue = element.value;\r\n    selectedMassInput = tsEssentials.isNumeric(inputValue) ? +inputValue : 0;\r\n    element.step = calculateMassInputStep(); //step = 10% of input value, round down to nearest power of 10\r\n}\r\nfunction cbxDisplayVectorsHandler(event: Event) {\r\n    const checkbox = event.target as HTMLInputElement;\r\n    displayVectors = checkbox ? checkbox.checked : false;\r\n    if (!animationRunning) {\r\n        drawSimulationState();\r\n    }\r\n}\r\nfunction radioBtnMouseActionChangeHandler(event: Event): void {\r\n    const target = event.target as HTMLInputElement;\r\n    if (target && target.type === 'radio') {\r\n      selectedCvsClickAction = target.value;\r\n    }\r\n}\r\nfunction cvsTouchStartHandler(this: HTMLElement, ev: TouchEvent) {\r\n    cvsLMouseState = MouseBtnState.Down;\r\n    const touchPosition = getCanvasTouchPosition(ev);\r\n\r\n    switch (CvsClickAction[selectedCvsClickAction as keyof typeof CvsClickAction]) {\r\n        case CvsClickAction.None:\r\n            console.log(touchPosition.toString());\r\n            break;\r\n        case CvsClickAction.AddBody:\r\n            ev.preventDefault();\r\n            mainMouseBtnDownLastCvsPosition = touchPosition;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\nfunction cvsTouchEndHandler(this: HTMLElement, ev: TouchEvent) {\r\n    cvsLMouseState = MouseBtnState.Up;\r\n    const touchPosition = getCanvasTouchEndPosition(ev);\r\n\r\n    switch (CvsClickAction[selectedCvsClickAction as keyof typeof CvsClickAction]) {\r\n        case CvsClickAction.None:\r\n            break;\r\n        case CvsClickAction.AddBody:\r\n            const body: Body2d = body2dFromInputs();\r\n            if (body.mass <= 0) { break; }\r\n            const vel: Vector2D = calculateVelocityBetweenPoints(pointInCanvasSpaceToSimulationSpace(mainMouseBtnDownLastCvsPosition), pointInCanvasSpaceToSimulationSpace(touchPosition));\r\n            addBodyToSimulation(body, pointInCanvasSpaceToSimulationSpace(touchPosition), vel);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (!animationRunning) {\r\n        drawSimulationState();\r\n    }\r\n}\r\nfunction cvsMouseDownHandler(this: HTMLElement, ev: MouseEvent) {\r\n    if (ev.button !== 0) {\r\n        return; //do nothing if a button other than the main mouse button is clicked\r\n    }\r\n    cvsLMouseState = MouseBtnState.Down;\r\n    const mousePosition: Vector2D = getCanvasMousePosition(ev);\r\n    log(\"canvasMouseDownHandler:\" + MouseBtnState[cvsLMouseState] + \" - at Position: \" + mousePosition.toString());\r\n\r\n    switch (CvsClickAction[selectedCvsClickAction as keyof typeof CvsClickAction]) {\r\n        case CvsClickAction.None:  \r\n            break;\r\n        case CvsClickAction.AddBody:\r\n            mainMouseBtnDownLastCvsPosition = mousePosition;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\nfunction cvsMouseUpHandler(this: HTMLElement, ev: MouseEvent) {\r\n    if (ev.button !== 0 || cvsLMouseState === MouseBtnState.Up) {\r\n        return; //only the main mouse button matters, and only if the click was initiated inside the canvas\r\n    }\r\n    cvsLMouseState = MouseBtnState.Up;\r\n    const mousePosition: Vector2D = getCanvasMousePosition(ev);\r\n    log(\"canvasMouseUpHandler:\" + MouseBtnState[cvsLMouseState] + \" - at Position: \" + mousePosition.toString());\r\n\r\n    switch (CvsClickAction[selectedCvsClickAction as keyof typeof CvsClickAction]) {\r\n        case CvsClickAction.None:\r\n            break;\r\n        case CvsClickAction.AddBody:\r\n            const body: Body2d = body2dFromInputs();\r\n            if (body.mass <= 0) { break; }\r\n            const vel: Vector2D = calculateVelocityBetweenPoints(pointInCanvasSpaceToSimulationSpace(mainMouseBtnDownLastCvsPosition), pointInCanvasSpaceToSimulationSpace(mousePosition));\r\n            addBodyToSimulation(body, pointInCanvasSpaceToSimulationSpace(mousePosition), vel);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (!animationRunning) {\r\n        drawSimulationState();\r\n    }\r\n}\r\nfunction cvsMouseMoveHandler(this: HTMLElement, ev: MouseEvent) {\r\n    const mousePosition: Vector2D = getCanvasMousePosition(ev);\r\n    log(\"canvasMouseMoveHandler:\" + MouseBtnState[cvsLMouseState] + \" - at Position: \" + mousePosition.toString());\r\n    if (cvsLMouseState === MouseBtnState.Up) {\r\n        return;\r\n    }\r\n    //goal: display vector for a body that is currently being added\r\n    //draw vector and do some additional shit probably\r\n    //or add body to simSpace as immovable, with the velocity from moving, then redraw everything\r\n}\r\nfunction cvsMouseOutHandler(this: HTMLElement, ev: MouseEvent) {\r\n    cvsLMouseState = MouseBtnState.Up;\r\n    //cancel an ongoing addBodyToSimulation\r\n    //...\r\n    //redraw simState to get rid of the adding's velocity-vector\r\n}\r\nfunction getCanvasMousePosition(event: MouseEvent): Vector2D {\r\n    const rect = visibleCanvas.getBoundingClientRect();\r\n    const x = event.clientX - rect.left;\r\n    const y = event.clientY - rect.top;\r\n    return new Vector2D(x, y);\r\n}\r\nfunction getCanvasTouchPosition(event: TouchEvent): Vector2D {\r\n    const rect = visibleCanvas.getBoundingClientRect();\r\n    const touch = event.touches[0];\r\n    return new Vector2D(touch.clientX - rect.left, touch.clientY - rect.top)\r\n}\r\nfunction getCanvasTouchEndPosition(event: TouchEvent): Vector2D {\r\n    const rect = visibleCanvas.getBoundingClientRect();\r\n    const touch = event.changedTouches[0];\r\n    return new Vector2D(touch.clientX - rect.left, touch.clientY - rect.top)\r\n}\r\n/**\r\n * The step is equal to 10% of the input value, rounded down to the nearest power of 10.\r\n * @returns Step as a string. Step is always at least 1 or larger.\r\n */\r\nfunction calculateMassInputStep(): string {\r\n    let step = (10 ** (Math.floor(Math.log10(selectedMassInput)) - 1));\r\n    return step < 1 ? \"1\" : step.toString();\r\n}\r\nfunction initStatusBar() {\r\n    statusBar.fields;\r\n    const idStart = \"statusText\";\r\n    let i = 1;\r\n    let statusBarField = document.getElementById(idStart + i);\r\n    while (statusBarField !== null) {\r\n        statusBar.fields.push(statusBarField)\r\n        i++;\r\n        statusBarField = document.getElementById(idStart + i);\r\n    }\r\n}\r\nfunction body2dFromInputs(): Body2d {\r\n    const movable = tsEssentials.isChecked(\"cvsCbxBodyMovable\");\r\n    return new Body2d(selectedMassInput, movable);\r\n}\r\n/**\r\n * @param fieldIndexOrId number of field, starting at one. OR id of the field\r\n */\r\nfunction setStatusMessage(newMessage: string, fieldIndexOrId?: number | string, append: boolean = false) {\r\n    let element: HTMLElement;\r\n    if (typeof fieldIndexOrId === \"number\") {\r\n        element = statusBar.fields[fieldIndexOrId - 1];\r\n    } else if (typeof fieldIndexOrId === \"string\") {\r\n        element = document.getElementById(fieldIndexOrId)!;\r\n    } else { //else -> undefined\r\n        element = statusBar.fields[0];\r\n    }\r\n    \r\n    if (append) {\r\n        element!.innerHTML += newMessage;\r\n    } else {\r\n        element!.innerHTML = newMessage;\r\n    }\r\n}\r\nfunction initCanvas(width: number, height: number) {\r\n    visibleCanvas = (document.getElementById(\"theCanvas\")) as HTMLCanvasElement;\r\n    visibleCanvas.width = width;\r\n    visibleCanvas.height = height;\r\n    visibleCanvasCtx = visibleCanvas.getContext(\"2d\")!;\r\n    setStatusMessage(`Canvas dimension: ${width} * ${height}`, 5);\r\n    //offscreenCanvas = new OffscreenCanvas(visibleCanvas.clientWidth, visibleCanvas.clientHeight);\r\n    //offscreenCanvasCtx = offscreenCanvas.getContext(\"2d\")!;\r\n}\r\nfunction log(message: string) {\r\n    const timestamp = new Date();\r\n    const hours = timestamp.getHours().toString().padStart(2, '0');\r\n    const minutes = timestamp.getMinutes().toString().padStart(2, '0');\r\n    const seconds = timestamp.getSeconds().toString().padStart(2, '0');\r\n    const milliseconds = timestamp.getMilliseconds().toString().padStart(3, '0');\r\n\r\n    const formattedTimestamp = `${hours}:${minutes}:${seconds}.${milliseconds}`;\r\n    console.log(`[${formattedTimestamp}] ${message}`);\r\n}\r\n//#endregion\r\n//#region canvas and drawing stuff\r\n/**\r\n * @param position in canvas space\r\n * @param direction in canvas space\r\n */\r\nfunction drawVector(position: Vector2D, direction: Vector2D, color?: string) {\r\n    //optionally normalize the direction and scale later\r\n    if (color === undefined) { color = \"white\" }\r\n    let endPosition: Vector2D = Vector2D.add(position, direction);\r\n    visibleCanvasCtx.beginPath();\r\n    visibleCanvasCtx.lineWidth = 3;\r\n    visibleCanvasCtx.strokeStyle = color;\r\n    visibleCanvasCtx.moveTo(position.x, position.y);\r\n    visibleCanvasCtx.lineTo(endPosition.x, endPosition.y);\r\n    visibleCanvasCtx.stroke();\r\n}\r\n/**\r\n * draws a circular body at specified position, in specified color\r\n * @param body \r\n * @param position \r\n * @param color default white\r\n */\r\nfunction drawBody(body: Body2d, position: Vector2D) {\r\n    let visibleRadius = Math.max(body.radius / canvasSpace.zoomFactor, 1); //Minimum Radius of displayed body is one\r\n    visibleCanvasCtx.beginPath();\r\n    visibleCanvasCtx.arc(position.x, position.y, visibleRadius, 0, Math.PI * 2); //zF = m/cu; r...m -> r/zF -> (m)/\r\n    visibleCanvasCtx.closePath();\r\n    visibleCanvasCtx.fillStyle = body.color;\r\n    visibleCanvasCtx.fill();\r\n}\r\nfunction drawBodies() {\r\n    const objects = simState.objectStates;\r\n    objects.forEach(object => {\r\n        if (object !== null) {\r\n            drawBody(object.body, pointInSimulationSpaceToCanvasSpace(object.position));\r\n        }\r\n    });\r\n}\r\nfunction drawSimulationState() {\r\n    visibleCanvasCtx.clearRect(0, 0, visibleCanvas.width, visibleCanvas.height);\r\n    drawBodies();\r\n    if (displayVectors) {\r\n        drawVectors();\r\n    }\r\n}\r\nfunction drawVectors() {\r\n    simState.objectStates.forEach(objectState => {\r\n        drawVector(pointInSimulationSpaceToCanvasSpace(objectState.position), directionInSimulationSpaceToCanvasSpace(objectState.acceleration), \"green\");\r\n        drawVector(pointInSimulationSpaceToCanvasSpace(objectState.position), directionInSimulationSpaceToCanvasSpace(objectState.velocity), \"red\");\r\n    });\r\n}\r\nfunction pointInSimulationSpaceToCanvasSpace(simVector: Vector2D): Vector2D {\r\n    //transformation:\r\n    //1. shift (point in SimSpace - Origin of C in SimSpace)\r\n    //2. flip (y axis point in opposite directions)\r\n    //3. scale (result from 2 divided by Zoom in simulationUnits/canvasUnit)\r\n    const shifted: Vector2D = Vector2D.subtract(simVector, canvasSpace.origin);\r\n    const flipped: Vector2D = {x: shifted.x, y: shifted.y * -1}\r\n    const scaled: Vector2D = Vector2D.scale(flipped, 1/canvasSpace.zoomFactor);\r\n    return scaled;\r\n}\r\nfunction directionInSimulationSpaceToCanvasSpace(simVector: Vector2D): Vector2D {\r\n    //transformation:\r\n    //1. flip (y axis are in opposite directions)\r\n    //2. scale (result from 2 divided by Zoom in simulationUnits/canvasUnit)\r\n    const flipped: Vector2D = {x: simVector.x, y: simVector.y * -1}\r\n    const scaled: Vector2D = Vector2D.scale(flipped, 1/canvasSpace.zoomFactor);\r\n    return scaled;\r\n}\r\nfunction pointInCanvasSpaceToSimulationSpace(canvasVector: Vector2D): Vector2D {\r\n    //transformation:\r\n    //1. scale (canvasVector * zoom in simulationUnits/canvasUnit)\r\n    //2. flip (y axis are in opposite directions)\r\n    //3. shift (scaledAndFlippedPoint + Origin of C in SimSpace)\r\n    let simulationVector: Vector2D;\r\n    simulationVector = Vector2D.add(Vector2D.hadamardProduct(Vector2D.scale(canvasVector, canvasSpace.zoomFactor), {x: 1, y: canvasSpace.orientationY}), canvasSpace.origin)\r\n    return simulationVector;\r\n}\r\n/**\r\n * Origin {x:0,y:0} is at the top-left\r\n */\r\nfunction setCanvasOrigin(newOrigin: Vector2D) {\r\n    canvasSpace.origin = newOrigin;\r\n    if (!animationRunning) {\r\n        drawSimulationState();\r\n    }\r\n}\r\nfunction scrollRight() {\r\n    let scrollDistance = calculateScrollDistance(\"horizontal\"); //in simulationUnits\r\n    setCanvasOrigin({x: canvasSpace.origin.x + scrollDistance, y: canvasSpace.origin.y });\r\n}\r\nfunction scrollLeft() {\r\n    let scrollDistance = calculateScrollDistance(\"horizontal\"); //in simulationUnits\r\n    setCanvasOrigin({x: canvasSpace.origin.x - scrollDistance, y: canvasSpace.origin.y });\r\n}\r\nfunction scrollUp() {\r\n    let scrollDistance = calculateScrollDistance(\"vertical\"); //in simulationUnits\r\n    setCanvasOrigin({x: canvasSpace.origin.x, y: canvasSpace.origin.y + scrollDistance });\r\n}\r\nfunction scrollDown() {\r\n    let scrollDistance = calculateScrollDistance(\"vertical\"); //in simulationUnits\r\n    setCanvasOrigin({x: canvasSpace.origin.x, y: canvasSpace.origin.y - scrollDistance });\r\n}\r\n/**\r\n * \r\n * @param orientation \"horizontal\" | \"vertical\"\r\n * @param rate a number *0<rate<1* - the relative distance of the screen dimension (h/v) that one scroll step will move (ie. 0.1 will scroll 10% of the width/height in a horizontal/vertical direction)\r\n * @returns \r\n */\r\nfunction calculateScrollDistance(orientation: \"horizontal\" | \"vertical\", rate?: number): number {\r\n    if (rate === undefined) { rate = defaultScrollRate; }\r\n    switch (orientation) {\r\n        case \"horizontal\":\r\n            return visibleCanvas.width * rate * canvasSpace.zoomFactor;\r\n        case \"vertical\":\r\n            return visibleCanvas.height * rate * canvasSpace.zoomFactor;\r\n    }\r\n}\r\nfunction zoomOut() {\r\n    const zoomCenter: Vector2D = {x: visibleCanvas.width/2, y: visibleCanvas.height/2};\r\n    const newZoom = canvasSpace.zoomFactor + zoomStep;\r\n\r\n    let shiftOrigin: Vector2D = Vector2D.scale(zoomCenter, zoomStep); //zoom step here is really the difference in zoom change (zoomFactor now - zoomFactor before)\r\n\r\n    canvasSpace.origin = {x: canvasSpace.origin.x - shiftOrigin.x, y: canvasSpace.origin.y + shiftOrigin.y};\r\n    canvasSpace.zoomFactor = newZoom;\r\n\r\n    setStatusMessage(`Zoom: ${newZoom} (m per pixel)`, 4);\r\n    if (!animationRunning) {\r\n        drawSimulationState();\r\n    }\r\n}\r\nfunction zoomIn() {\r\n    if (canvasSpace.zoomFactor <= 1) { return; }\r\n    let zoomCenter: Vector2D = {x: visibleCanvas.width/2, y: visibleCanvas.height/2};\r\n    let newZoom = canvasSpace.zoomFactor - zoomStep;\r\n\r\n    let shiftOrigin: Vector2D = Vector2D.scale(zoomCenter, zoomStep); //zoom step here is really the difference in zoom change (zoomFactor now - zoomFactor before)\r\n\r\n    canvasSpace.origin = {x: canvasSpace.origin.x + shiftOrigin.x, y: canvasSpace.origin.y - shiftOrigin.y};\r\n    canvasSpace.zoomFactor = newZoom;\r\n    \r\n    setStatusMessage(`Zoom: ${newZoom} (m per pixel)`, 4);\r\n    if (!animationRunning) {\r\n        drawSimulationState();\r\n    }\r\n}\r\nfunction drawCoordinateSystem() {\r\n\r\n}\r\n//#endregion\r\n//#region simulation\r\n/**\r\n * Calculates and returns the velocity vector needed to get from *fromCoordinate* to *toCoordinate* in *timeFrameInSeconds* seconds\r\n * @param toCoordinate value in simulation space\r\n * @param fromCoordinate value in simulation space\r\n * @param timeFrameInSeconds *optional* defaults to one\r\n */\r\nfunction calculateVelocityBetweenPoints(toCoordinate: Vector2D, fromCoordinate: Vector2D, timeFrameInSeconds: number = 1): Vector2D {\r\n    if (timeFrameInSeconds <= 0) { timeFrameInSeconds = 1; }\r\n    let distance: Vector2D = Vector2D.subtract(toCoordinate, fromCoordinate);\r\n    return Vector2D.scale(distance, 1 / timeFrameInSeconds);\r\n}\r\nfunction setupSimulationState() {\r\n    let width = visibleCanvas.width;\r\n    let height = visibleCanvas.height;\r\n    let canvasMiddle: Vector2D = { x: width / 2, y: height / 2 };\r\n\r\n    /* setup one - with zoom = 1*/\r\n    //let startA: Vector2D = canvasSpaceToSimulationSpace({ x: canvasMiddle.x - 50 , y: canvasMiddle.y + 50});\r\n    //let startB: Vector2D = canvasSpaceToSimulationSpace({ x: canvasMiddle.x + 50 , y: canvasMiddle.y - 50});\r\n    //let velA: Vector2D = {x: 40, y: -50 };\r\n    //let velB: Vector2D = {x: -40, y: 50 };\r\n    //addBody(newBody(1000), startA, velA);\r\n    //addBody(newBody(1000), startB, velB);\r\n\r\n    /* setup two - with zoom = 1 */\r\n    //let startA: Vector2D = canvasSpaceToSimulationSpace({ x: canvasMiddle.x - width / 8 , y: canvasMiddle.y});\r\n    //let startB: Vector2D = canvasSpaceToSimulationSpace({ x: canvasMiddle.x + width / 8 , y: canvasMiddle.y});\r\n    //addBody(newBody(100000), startA);\r\n    //addBody(newBody(100000), startB);\r\n   \r\n    /* setup three - with zoom = 1 */\r\n    //let startA: Vector2D = { x: 200, y: -100};\r\n    //let startB: Vector2D = { x: 400, y: -100};\r\n    //let startC: Vector2D = { x: 300, y: -200};\r\n    //addBody(newBody(1000000, 10), startA);-\r\n    //addBody(newBody(1000000, 10), startB);\r\n    //addBody(newBody(1000000, 10), startC);    \r\n   \r\n    /* setup four */\r\n    //this is a \"stable\" orbit (g = 1, tickLength = 10. ~3300 ticks)  \r\n    let startA: Vector2D = { x: 640, y: -360};\r\n    let startB: Vector2D = { x: 1140, y: -410};\r\n    let velA: Vector2D = {x: 0, y: 0 };\r\n    let velB: Vector2D = {x: -110, y: -110 };\r\n    addBodyToSimulation(newBody(10000000, 50), startA, velA);\r\n    addBodyToSimulation(newBody(1000000, 40), startB, velB);\r\n\r\n    /* setup five - with zoom = 1 */ \r\n    //let startA: Vector2D = { x: 640, y: -360};\r\n    //let startB: Vector2D = { x: 1140, y: -410};\r\n    //let startC: Vector2D = { x: 1010, y: 0};\r\n    //let velA: Vector2D = {x: 0, y: 0 };\r\n    //let velB: Vector2D = {x: -110, y: -110 };\r\n    //let velC: Vector2D = {x: -150, y: -150 };\r\n    //addBody(newBody(1000000000, 50), startA, velA);\r\n    //addBody(newBody(1000, 10), startB, velB); \r\n    //addBody(newBody(1000, 10), startC, velC); \r\n}\r\nfunction toggleSimulation(this: HTMLElement, ev: MouseEvent) {\r\n    if (simState.running) {\r\n        pauseSimulation();\r\n    } else {\r\n        resumeSimulation();\r\n    }\r\n}\r\nfunction resetSimulation() {\r\n    if (simState.running) {\r\n        pauseSimulation();\r\n    }\r\n    simState.clearObjects();\r\n    simState.tickCount = 0;\r\n    drawSimulationState();\r\n    setStatusMessage(`Simulation Tick: ${simState.tickCount}`, 2);\r\n}\r\n/**\r\n * @param body \r\n * @param position in **SIMULATION SPACE**\r\n * @param velocity in **SIMULATION SPACE**\r\n * @param movable \r\n */\r\nfunction addBodyToSimulation(body?: Body2d, position?: Vector2D, velocity?: Vector2D, movable?: boolean) {\r\n    if (body === undefined) {\r\n        body = newBody();\r\n    }\r\n    if (position === undefined) {\r\n        position = {x: 0, y: 0};\r\n    }\r\n    if (velocity === undefined) {\r\n        velocity = {x: 0, y: 0};\r\n    }\r\n    if (movable !== undefined) {\r\n        body.movable = movable;\r\n    }\r\n    const objectState = {body: body, position: position, velocity: velocity, acceleration: {x: 0, y: 0}};\r\n\r\n    simState.addObject(objectState);\r\n}\r\nfunction startNewSimulation() {\r\n    resetSimulation();\r\n    setStatusMessage(\"Simulation running\", 1);\r\n    document.getElementById(\"cvsBtnToggleSim\")!.innerHTML = \"Pause\";\r\n    \r\n    setupSimulationState();\r\n    simState.run();\r\n    drawRunningSimulation();\r\n}\r\nfunction resumeSimulation() {\r\n    if (!simState.running) {\r\n        simState.run();\r\n        drawRunningSimulation();\r\n        setStatusMessage(\"Simulation running\", 1);\r\n        document.getElementById(\"cvsBtnToggleSim\")!.innerHTML = \"Pause\";\r\n    }\r\n}\r\nfunction pauseSimulation() {\r\n    if (simState.running) {\r\n        animationRunning = false;\r\n        simState.pause();\r\n        setStatusMessage(\"Simulation paused\", 1);\r\n        document.getElementById(\"cvsBtnToggleSim\")!.innerHTML = \"Play\";\r\n    }\r\n}\r\nfunction drawRunningSimulation() {\r\n    if (animationRunning) {\r\n        return;\r\n    }\r\n    animationRunning = true;\r\n    const runDrawLoop = () => {\r\n        if (animationRunning) {\r\n            setTimeout(runDrawLoop, frameLength);\r\n            drawSimulationState();\r\n            setStatusMessage(`Simulation Tick: ${simState.tickCount}`, 2);\r\n            //log(\"Draw simulation step\");\r\n        }\r\n    };\r\n    runDrawLoop();\r\n}\r\nfunction newBody(): Body2d \r\nfunction newBody(mass: number, radius: number): Body2d \r\nfunction newBody(mass: number, radius?: number): Body2d \r\nfunction newBody(mass?: number, radius?: number): Body2d {\r\n    let body1: Body2d;\r\n    if (mass === undefined) {\r\n        body1 = new Body2d(rng(20, 200));    \r\n    } else if (radius === undefined) {\r\n        body1 = new Body2d(mass);\r\n    } else {\r\n        body1 = new Body2d(mass, true, \"white\", radius);\r\n    }\r\n    return body1;\r\n}\r\n//#endregion\r\n//#region other stuff\r\n/**\r\n * min and max included\r\n * @returns random number\r\n */\r\nfunction rng(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\n//#endregion\r\n"],"names":["Vector2D","x","y","vectors","previous","current","v1","v2","v","scalar","mag","_Body2d","mass","movable","color","radius","__publicField","newMass","newRadius","affected","c","Body2d","Simulation","objectState","running","tickCount","collisionDetection","g","forces","i","j","forceOnI","forceOnJ","index","totalForceOnBody","newAcceleration","dt","objectStateI","objectStateJ","distance","netForceBetweenBodies","unitVectorIToJ","runSimulationStep","isNumeric","s","getInputValue","inputId","input","getInputNumber","inputValue","isChecked","checkbox","CvsClickAction","MouseBtnState","visibleCanvas","visibleCanvasCtx","statusBar","simState","canvasSpace","frameLength","animationRunning","zoomStep","defaultScrollRate","selectedMassInput","displayVectors","cvsLMouseState","mainMouseBtnDownLastCvsPosition","selectedCvsClickAction","initialize","initStatusBar","registerEvents","initCanvas","tsEssentials.isChecked","tsEssentials.getInputNumber","calculateMassInputStep","_a","startNewSimulation","_b","toggleSimulation","_c","resetSimulation","_d","zoomOut","_e","zoomIn","_f","scrollLeft","_g","scrollRight","_h","scrollUp","_i","scrollDown","_j","cvsMouseDownHandler","_k","cvsMouseUpHandler","_l","cvsMouseOutHandler","_m","cvsMouseMoveHandler","_n","cvsTouchStartHandler","_o","cvsTouchEndHandler","_p","massInputChangeHandler","_q","cbxDisplayVectorsHandler","radioButton","radioBtnMouseActionChangeHandler","element","tsEssentials.isNumeric","event","drawSimulationState","target","ev","touchPosition","getCanvasTouchPosition","getCanvasTouchEndPosition","body","body2dFromInputs","vel","calculateVelocityBetweenPoints","pointInCanvasSpaceToSimulationSpace","addBodyToSimulation","mousePosition","getCanvasMousePosition","log","rect","touch","step","idStart","statusBarField","setStatusMessage","newMessage","fieldIndexOrId","append","width","height","message","timestamp","hours","minutes","seconds","milliseconds","formattedTimestamp","drawVector","position","direction","endPosition","drawBody","visibleRadius","drawBodies","object","pointInSimulationSpaceToCanvasSpace","drawVectors","directionInSimulationSpaceToCanvasSpace","simVector","shifted","flipped","canvasVector","simulationVector","setCanvasOrigin","newOrigin","scrollDistance","calculateScrollDistance","orientation","rate","zoomCenter","newZoom","shiftOrigin","toCoordinate","fromCoordinate","timeFrameInSeconds","setupSimulationState","startA","startB","velA","velB","newBody","pauseSimulation","resumeSimulation","velocity","drawRunningSimulation","runDrawLoop","body1","rng","min","max"],"mappings":"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"}