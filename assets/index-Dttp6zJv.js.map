{"version":3,"file":"index-Dttp6zJv.js","sources":["../../src/scripts/vector2d.ts","../../src/scripts/gravity.ts","../../src/scripts/types.ts","../../src/scripts/canvas.ts","../../src/scripts/essentials.ts","../../src/scripts/main.ts"],"sourcesContent":["export class Vector2D {\r\n    public x: number;\r\n    public y: number;\r\n    constructor(x?: number, y?: number) {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    public toString() {\r\n        return `x: ${this.x}, y: ${this.y}`;\r\n    }\r\n    public add(...vectors: Vector2D[]): Vector2D {\r\n        const result: Vector2D = vectors.reduce((previous, current) => {\r\n            return new Vector2D(previous.x + current.x, previous.y + current.y);\r\n        }, new Vector2D(this.x, this.y));\r\n        return result;\r\n    }\r\n    /**\r\n     * @returns v1 - v2\r\n     */\r\n    public subtract(v: Vector2D): Vector2D {\r\n        return new Vector2D(this.x - v.x, this.y - v.y);\r\n    }\r\n    public scale(scalar: number): Vector2D {\r\n        return new Vector2D(this.x * scalar, this.y * scalar);\r\n    }\r\n    public dotProduct(v: Vector2D): number {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    public magnitude(): number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    public normalize(): Vector2D {\r\n        const magnitude = this.magnitude();\r\n        if (magnitude === 0) {\r\n            return new Vector2D(0, 0);\r\n        } else {\r\n            return this.scale(1 / magnitude);\r\n        }\r\n    }\r\n    /**\r\n     * @param v Vector2D\r\n     * @returns Distance to v2\r\n     */\r\n    public distance(v: Vector2D): number {\r\n        return Math.sqrt((v.x - this.x)**2 + (v.y - this.y)**2);\r\n    }\r\n    /**\r\n     * returns a vector pointing to v\r\n     */\r\n    public displacementVector(v: Vector2D) {\r\n        return v.subtract(this);\r\n    }\r\n    public hadamardProduct(v: Vector2D) {\r\n        return new Vector2D(this.x * v.x, this.y * v.y);\r\n    }\r\n}","import { ObjectState } from \"./types\";\r\nimport { Vector2D } from \"./vector2d\"\r\nexport class Body2d {\r\n    private _mass: number;\r\n    private _radius: number;\r\n    private _color: string;\r\n    private _movable: boolean;\r\n    static defaultDensity = 1;\r\n\r\n    // #region constructor, get, set\r\n    constructor(mass: number, movable?: boolean, color?: string, radius?: number)  {\r\n        this._mass = mass;\r\n        if (radius === undefined) { radius = this.defaultRadius(mass); }\r\n        this._radius = radius;\r\n        if (color === undefined) { color = \"white\"; }\r\n        this._color = color;\r\n        if (movable === undefined) { movable = true; }\r\n        this._movable = movable;     \r\n    }\r\n    public get mass() {\r\n        return this._mass;\r\n    }\r\n    public set mass(newMass: number) {\r\n        this._mass = newMass;\r\n    }\r\n    public get radius() {\r\n        return this._radius;\r\n    }\r\n    public set radius(newRadius: number) {\r\n        this._radius = newRadius;\r\n    }\r\n    public get movable() {\r\n        return this._movable;\r\n    }\r\n    public set movable(affected: boolean) {\r\n        this._movable = affected\r\n    }   \r\n    public get color() : string {\r\n        return this._color\r\n    }\r\n    public set color(c: string) {\r\n        if (!(CSS.supports(\"color\", c))) {\r\n            c = \"white\";\r\n        }\r\n        this._color = c;\r\n    } \r\n    // #endregion\r\n    /**\r\n     * returns the radius of a sphere based on mass and density\r\n     */\r\n    public defaultRadius(mass?: number) {\r\n        if (mass === undefined) {\r\n            mass = this.mass;\r\n        }\r\n        return ((3 * mass)/(4 * Math.PI * Body2d.defaultDensity)) ** (1/3); \r\n    }\r\n}\r\nexport class Simulation {\r\n    private _simulationState: ObjectState[];\r\n    public _running: boolean;\r\n    public _tickCount: number;\r\n    private _tickLength: number;\r\n    private _collisionDetection: boolean;\r\n    private _elasticCollisions: boolean;\r\n    private _g: number; // gravitational constant\r\n    private readonly gravityLowerBounds: number = 1; // force calculations for distances lower than this number are skipped\r\n    constructor() { \r\n        this._simulationState = [];\r\n        this._running = false;\r\n        this._tickCount = 0;\r\n        this._tickLength = 10; // ms\r\n        this._collisionDetection = false;\r\n        this._elasticCollisions = false;\r\n        this._g = 50;\r\n    }\r\n    // #region get, set\r\n    public get simulationState() {\r\n        return this._simulationState;\r\n    }\r\n    public set simulationState(objectState: ObjectState[]) {\r\n        this._simulationState = objectState;\r\n    }\r\n    public get running() {\r\n        return this._running;\r\n    }\r\n    public set running(running: boolean) {\r\n        this._running = running;\r\n    }\r\n    public get tickCount() {\r\n        return this._tickCount;\r\n    }\r\n    public set tickCount(tickCount: number) {\r\n        this._tickCount = tickCount;\r\n    }\r\n    public get tickLength() {\r\n        return this._tickLength;\r\n    }\r\n    public set tickLength(t: number) {\r\n        this._tickLength = t;\r\n    }\r\n    public get collisionDetection() {\r\n        return this._collisionDetection;\r\n    }\r\n    public set collisionDetection(collisionDetection: boolean) {\r\n        this._collisionDetection = collisionDetection;\r\n    }\r\n    public get elasticCollisions() {\r\n        return this._elasticCollisions;\r\n    }\r\n    public set elasticCollisions(elasticCollisions: boolean) {\r\n        this._elasticCollisions = elasticCollisions;\r\n    }\r\n    public get g() {\r\n        return this._g;\r\n    }\r\n    public set g(g: number) {\r\n        this._g = g;\r\n    }\r\n// #endregion\r\n    public addObject(body: Body2d, position: Vector2D, velocity: Vector2D): number \r\n    public addObject(objectState: ObjectState): number \r\n    public addObject(bodyOrObject: ObjectState | Body2d, position?: Vector2D, velocity?: Vector2D): number {\r\n        if (bodyOrObject instanceof Body2d) {\r\n            bodyOrObject = {body: bodyOrObject, position: position!, velocity: velocity!, acceleration: new Vector2D(0, 0)};\r\n        }\r\n        if (!bodyOrObject.body.movable) {\r\n            bodyOrObject.velocity = new Vector2D(0, 0);\r\n        }\r\n        return this.simulationState.push(bodyOrObject);\r\n    }\r\n    public clearObjects() {\r\n        this.simulationState = [];\r\n    }\r\n    public removeFromObjectStates(i: number) {\r\n        this.simulationState.splice(i, 1);\r\n    }\r\n    public pause() {\r\n        this.running = false;\r\n    }\r\n    public nextState() {\r\n        this.updateAccelerationVectors();\r\n        this.updateVelocitiesAndPositions();\r\n        if (this.collisionDetection) {\r\n            this.handleCollisions();\r\n        }\r\n        this.tickCount++;\r\n    }\r\n    private updateAccelerationVectors() {\r\n        const forces: Map<number, Vector2D> = this.calculateForces();\r\n\r\n        this.simulationState.forEach((objectState, index) => {\r\n            const totalForceOnBody = forces.get(index) || (new Vector2D(0, 0));\r\n            const newAcceleration = totalForceOnBody.scale(1 / objectState.body.mass);\r\n            objectState.acceleration = newAcceleration;\r\n        });\r\n    }\r\n    private calculateForces() {\r\n        const forces: Map<number, Vector2D> = new Map();\r\n        \r\n        for (let i = 0; i < this.simulationState.length; i++) {\r\n            for (let j = i+1; j < this.simulationState.length; j++) {\r\n                const forceOnI = this.calculateForceBetweenBodies(i, j);\r\n                const forceOnJ = forceOnI.scale(-1);\r\n\r\n                forces.set(i, (forces.get(i) || new Vector2D(0, 0)).add(forceOnI));\r\n                forces.set(j, (forces.get(j) || new Vector2D(0, 0)).add(forceOnJ));\r\n            }\r\n        }\r\n        return forces;\r\n    }\r\n    /**\r\n     * Calculates the next **position** and **velocity** of the object in state, and updates objectState accordingly.\r\n     * @param objectState *ObjectState* containing the body\r\n     */\r\n    private updateVelocityAndPosition(objectState: ObjectState) {\r\n        const dt = this.tickLength / 1000;\r\n        if (!objectState.body.movable) { return; }\r\n        // update velocity based on acceleration: v = v + a * dt\r\n        objectState.velocity = objectState.velocity.add(objectState.acceleration.scale(dt));\r\n\r\n        // update position based on velocity: x = x + v * dt\r\n        objectState.position =  objectState.position.add(objectState.velocity.scale(dt));\r\n    }\r\n    private updateVelocitiesAndPositions() {\r\n        this.simulationState.forEach(objectState => {\r\n            this.updateVelocityAndPosition(objectState)\r\n        });\r\n    }\r\n    /**\r\n     * Calculates the force-vector between the bodies in objectStates at index [i] and [j]\r\n     * @returns a vector representing the force applied ***to*** body at ***objectStates[i]***\r\n     */\r\n    private calculateForceBetweenBodies(i: number, j: number): Vector2D {\r\n        const objectStateI = this.simulationState[i];\r\n        const objectStateJ = this.simulationState[j];\r\n\r\n        const distance = objectStateI.position.distance(objectStateJ.position);\r\n        if (distance < this.gravityLowerBounds || distance === 0) // if the bodies are too close, skip the calculation\r\n            { return new Vector2D(0, 0); } \r\n        const netForceBetweenBodies: number = this.g * ((objectStateI.body.mass * objectStateJ.body.mass)/(distance * distance));\r\n        const unitVectorIToJ = objectStateJ.position.subtract(objectStateI.position).normalize();\r\n        return unitVectorIToJ.scale(netForceBetweenBodies);\r\n    }\r\n    private handleCollisions() {\r\n        for (let i = 0; i < this.simulationState.length; i++) {\r\n            const objectStateI = this.simulationState[i];\r\n            if (objectStateI === undefined) {\r\n                // undefined, if objectStateI has been merged in a previous collision\r\n                continue;\r\n            }\r\n            for (let j = i+1; j < this.simulationState.length; j++) {\r\n                const objectStateJ = this.simulationState[j];\r\n                const distanceIJ = objectStateI.position.distance(objectStateJ.position);\r\n                const collision = distanceIJ <= objectStateI.body.radius + objectStateJ.body.radius;\r\n                if (collision) {\r\n                    if (distanceIJ <= objectStateI.body.radius || distanceIJ <= objectStateJ.body.radius) { \r\n                        this.mergeBodies(i, j);\r\n                    } else if (this.elasticCollisions) {\r\n                        this.elasticCollision(objectStateI, objectStateJ);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Merges the two bodies at indices in objectStates into one. The lighter body is merged into the heavier one. Momentum is preserved.\r\n     */\r\n    private mergeBodies(index1: number, index2: number) {\r\n        const state1: ObjectState = this.simulationState[index1];\r\n        const state2: ObjectState = this.simulationState[index2];\r\n        const totalMomentum = state1.velocity.scale(state1.body.mass).add(state2.velocity.scale(state2.body.mass));\r\n        const totalMass = state1.body.mass + state2.body.mass;\r\n        const resultingVelocity = totalMomentum.scale(1 / totalMass);\r\n        let changeObject: ObjectState;\r\n        let removeIndex: number;\r\n\r\n        if (state2.body.mass > state1.body.mass) {\r\n            changeObject = state2;\r\n            removeIndex = index1;\r\n        } else {\r\n            changeObject = state1;\r\n            removeIndex = index2;\r\n        }\r\n        changeObject.velocity = resultingVelocity;\r\n        changeObject.body.mass = totalMass;\r\n        changeObject.body.radius = changeObject.body.defaultRadius();\r\n        changeObject.body.movable = (state1.body.movable && state2.body.movable);\r\n        if (!changeObject.body.movable) {\r\n            changeObject.velocity = new Vector2D(0, 0);\r\n        }\r\n        this.removeFromObjectStates(removeIndex);\r\n    }\r\n    /**\r\n    * @param restitution number between 0 (perfectly inelastic) and 1 (perfectly elastic)\r\n    */\r\n    private elasticCollision(body1: ObjectState, body2: ObjectState, restitution: number = 1) {\r\n        const lowerBounds = 1;\r\n        \r\n        // normal vector between the bodies\r\n        const displacement = body1.position.displacementVector(body2.position);\r\n        const distance = displacement.magnitude(); \r\n        if (distance <= lowerBounds || distance === 0) { \r\n            return; \r\n        }\r\n        const normalizedDisplacement = displacement.scale(1 / distance);\r\n\r\n        // relative velocity along the normalDisplacement\r\n        const relativeVelocity = body2.velocity.subtract(body1.velocity);\r\n        const velocityAlongDisplacement = relativeVelocity.dotProduct(normalizedDisplacement);\r\n\r\n        // if the bodies are moving apart, do nothing\r\n        if (velocityAlongDisplacement > 0) { return; }\r\n\r\n        // impulseScalar = change in momentum as scalar\r\n        const impulseScalar = -(1 + restitution) * velocityAlongDisplacement / (body1.body.mass + body2.body.mass);\r\n\r\n        // update velocities based on the impulse scalar\r\n        const deltaV1 = normalizedDisplacement.scale(impulseScalar * body2.body.mass);\r\n        const deltaV2 = normalizedDisplacement.scale(impulseScalar * body1.body.mass);\r\n        body1.velocity = body1.velocity.subtract(deltaV1);\r\n        body2.velocity = body2.velocity.add(deltaV2);\r\n        \r\n        // if a body is immovable, reset its velocity and transfer it back\r\n        if (!body1.body.movable) {\r\n            body1.velocity = new Vector2D(0, 0);\r\n            body2.velocity = body2.velocity.add(deltaV1);\r\n        }\r\n        if (!body2.body.movable) {\r\n            body2.velocity = new Vector2D(0, 0);\r\n            body1.velocity = body1.velocity.add(deltaV2);\r\n        }\r\n    }\r\n    private placeOverlappingBodiesTangentially(objectState1: ObjectState, objectState2: ObjectState) {\r\n        const displacement = objectState1.position.displacementVector(objectState2.position);\r\n        const normalDisplacement = displacement.normalize();        \r\n        const targetDistance = objectState1.body.radius + objectState2.body.radius;\r\n        const totalMoveDistance = targetDistance - displacement.magnitude();\r\n        const moveBody1 = normalDisplacement.scale(totalMoveDistance * (objectState1.body.radius / targetDistance));\r\n        const moveBody2 = normalDisplacement.scale(totalMoveDistance * (objectState2.body.radius / targetDistance));\r\n    \r\n        objectState1.position = objectState1.position.subtract(moveBody1);\r\n        objectState2.position = objectState2.position.add(moveBody2);\r\n    }\r\n    public run() {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n        this.running = true;\r\n\r\n        const runSimulationStep = () => {\r\n            if (this.running) {\r\n                setTimeout(runSimulationStep, this.tickLength);\r\n                this.nextState();\r\n            }\r\n        };\r\n        runSimulationStep();\r\n    }\r\n}\r\n","import { Body2d } from \"./gravity\";\r\nimport { Vector2D } from \"./vector2d\";\r\nexport interface AnimationSettings {\r\n    defaultScrollRate: number;\r\n    defaultZoomStep: number;\r\n    frameLength: number; // ms\r\n    displayVectors: boolean;\r\n    tracePaths: boolean;\r\n\r\n}\r\nexport enum CanvasClickAction {\r\n    None = 0,\r\n    AddBody = 1,\r\n    ScrollCanvas = 2,\r\n}\r\nexport enum MouseBtnState {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\nexport interface CanvasSpace { \r\n    // use this to transform simulationSpace to canvasSpace and back\r\n    origin: Vector2D, // the canvas' origin in simulation space\r\n    zoomFactor: number, // simulationUnits (meter) per canvasUnit\r\n    orientationY: number; // in practice this is -1, as the y-axis of the canvas is in the opposite direction of the simulation\r\n}\r\nexport interface ObjectState {\r\n    body: Body2d, \r\n    position: Vector2D,\r\n    /**\r\n     * simulationUnits (meter?) per second\r\n     */\r\n    velocity: Vector2D,\r\n    acceleration: Vector2D\r\n}","import { Body2d, Simulation } from \"./gravity\";\r\nimport { AnimationSettings, CanvasSpace, ObjectState } from \"./types\";\r\nimport { Vector2D } from \"./vector2d\";\r\n\r\nexport class Canvas {\r\n    // let offscreenCanvas: OffscreenCanvas; // use this in a worker thread to render or draw on, then transfer content to the visible html-canvas\r\n    // let offscreenCanvasCtx: OffscreenCanvasRenderingContext2D;\r\n    private _visibleCanvas: HTMLCanvasElement;\r\n    private _visibleCanvasContext: CanvasRenderingContext2D;\r\n    private _canvasSpace: CanvasSpace;\r\n    private _animationSettings: AnimationSettings;\r\n    private _animationRunning: boolean;\r\n    constructor(visibleCanvas: HTMLCanvasElement) {\r\n        this._visibleCanvas = visibleCanvas;\r\n        this._visibleCanvasContext = visibleCanvas.getContext(\"2d\")!;\r\n        this._canvasSpace = {origin: new Vector2D(0, 0), zoomFactor: 1, orientationY: -1};\r\n        this._animationSettings = { defaultScrollRate: 0.1, defaultZoomStep: 1, frameLength: 25, displayVectors: true, tracePaths: false };\r\n        this._animationRunning = false;\r\n    }\r\n    //#region get, set\r\n    get visibleCanvas() {\r\n        return this._visibleCanvas;\r\n    }\r\n    set visibleCanvas(canvas: HTMLCanvasElement) {\r\n        this._visibleCanvas = canvas;\r\n    }\r\n    get visibleCanvasContext() {\r\n        return this._visibleCanvasContext;\r\n    }\r\n    set visibleCanvasContext(context: CanvasRenderingContext2D) {\r\n        this._visibleCanvasContext = context;\r\n    }\r\n    get canvasSpace() {\r\n        return this._canvasSpace;\r\n    }\r\n    set canvasSpace(canvasSpace: CanvasSpace) {\r\n        this._canvasSpace = canvasSpace;\r\n    }\r\n    get animationSettings() {\r\n        return this._animationSettings;\r\n    }\r\n    set animationSettings(animationSetting: AnimationSettings) {\r\n        this._animationSettings = animationSetting;\r\n    }\r\n    get animationRunning() {\r\n        return this._animationRunning;\r\n    }\r\n    set animationRunning(animationRunning: boolean) {\r\n        this._animationRunning = animationRunning;\r\n    }\r\n    //#endregion\r\n    //#region drawing stuff\r\n    /**\r\n     * @param position in canvas space\r\n     * @param direction in canvas space\r\n     */\r\n    public drawVector(position: Vector2D, direction: Vector2D, color?: string) {\r\n        // optionally normalize the direction and scale later\r\n        if (color === undefined) { color = \"white\" }\r\n        let endPosition: Vector2D = position.add(direction);\r\n        this.visibleCanvasContext.beginPath();\r\n        this.visibleCanvasContext.lineWidth = 3;\r\n        this.visibleCanvasContext.strokeStyle = color;\r\n        this.visibleCanvasContext.moveTo(position.x, position.y);\r\n        this.visibleCanvasContext.lineTo(endPosition.x, endPosition.y);\r\n        this.visibleCanvasContext.stroke();\r\n    }\r\n    public drawVectors(objectStates: ObjectState[]) {\r\n        objectStates.forEach(objectState => {\r\n            this.drawVector(this.pointFromSimulationSpaceToCanvasSpace(objectState.position), this.directionFromSimulationSpaceToCanvasSpace(objectState.acceleration), \"green\");\r\n            this.drawVector(this.pointFromSimulationSpaceToCanvasSpace(objectState.position), this.directionFromSimulationSpaceToCanvasSpace(objectState.velocity), \"red\");\r\n        });\r\n    }\r\n    /**\r\n     * draws a circular body at specified position, in specified color\r\n     * @param body \r\n     * @param position \r\n     * @param color default white\r\n     */\r\n    public drawBody(body: Body2d, position: Vector2D) {\r\n        let visibleRadius = Math.max(body.radius / this.canvasSpace.zoomFactor, 1); // Minimum Radius of displayed body is one\r\n        this.visibleCanvasContext.beginPath();\r\n        this.visibleCanvasContext.arc(position.x, position.y, visibleRadius, 0, Math.PI * 2);\r\n        this.visibleCanvasContext.closePath();\r\n        this.visibleCanvasContext.fillStyle = body.color;\r\n        this.visibleCanvasContext.fill();\r\n    }\r\n    public drawBodies(objectStates: ObjectState[]) {\r\n        objectStates.forEach(object => {\r\n            this.drawBody(object.body, this.pointFromSimulationSpaceToCanvasSpace(object.position));\r\n        });\r\n    }\r\n    public redrawSimulationState(objectStates: ObjectState[], displayVectors: boolean) {\r\n        this.visibleCanvasContext.clearRect(0, 0, this.visibleCanvas.width, this.visibleCanvas.height);\r\n        this.drawBodies(objectStates);\r\n        if (displayVectors) {\r\n            this.drawVectors(objectStates);\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n    public pointFromSimulationSpaceToCanvasSpace(simVector: Vector2D): Vector2D {\r\n    // transformation:\r\n    // 1. shift (point in SimSpace - Origin of C in SimSpace)\r\n    // 2. flip (y axis point in opposite directions)\r\n    // 3. scale (result from 2 divided by Zoom in simulationUnits/canvasUnit)\r\n    const shifted: Vector2D = simVector.subtract(this.canvasSpace.origin);\r\n    const flipped: Vector2D = new Vector2D(shifted.x, shifted.y * -1);\r\n    const scaled: Vector2D = flipped.scale(1 / this.canvasSpace.zoomFactor);\r\n    return scaled;\r\n    }\r\n    public directionFromSimulationSpaceToCanvasSpace(simVector: Vector2D): Vector2D {\r\n        // transformation:\r\n        // 1. flip (y axis are in opposite directions)\r\n        // 2. scale (result from 2 divided by Zoom in simulationUnits/canvasUnit)\r\n        const flipped: Vector2D = new Vector2D(simVector.x, simVector.y * -1);\r\n        const scaled: Vector2D = flipped.scale(1 / this.canvasSpace.zoomFactor);\r\n        return scaled;\r\n    }\r\n    public pointFromCanvasSpaceToSimulationSpace(canvasVector: Vector2D): Vector2D {\r\n        // transformation:\r\n        // 1. scale (canvasVector * zoom in simulationUnits/canvasUnit)\r\n        // 2. flip (y axis are in opposite directions)\r\n        // 3. shift (scaledAndFlippedPoint + Origin of C in SimSpace)\r\n        let simulationVector: Vector2D;\r\n        simulationVector = canvasVector.scale(this.canvasSpace.zoomFactor).hadamardProduct(new Vector2D(1, this.canvasSpace.orientationY)).add(this.canvasSpace.origin);\r\n        return simulationVector;\r\n    }    \r\n    /**\r\n     * Origin {x:0,y:0} is at the top-left\r\n     */\r\n    public setCanvasOrigin(newOrigin: Vector2D) {\r\n        this.canvasSpace.origin = newOrigin;\r\n    }\r\n    public moveCanvasRight(rate?: number) {\r\n        const distance = this.calculateScrollDistance(\"horizontal\", rate); // in simulationUnits\r\n        this.setCanvasOrigin(new Vector2D(this.canvasSpace.origin.x + distance, this.canvasSpace.origin.y));\r\n    }\r\n    public moveCanvasLeft(rate?: number) {\r\n        const distance = this.calculateScrollDistance(\"horizontal\", rate); // in simulationUnits\r\n        this.setCanvasOrigin(new Vector2D(this.canvasSpace.origin.x - distance, this.canvasSpace.origin.y ));\r\n    }\r\n    public moveCanvasUp(rate?: number) {\r\n        const distance = this.calculateScrollDistance(\"vertical\", rate); // in simulationUnits\r\n        this.setCanvasOrigin(new Vector2D(this.canvasSpace.origin.x, this.canvasSpace.origin.y + distance));\r\n    }\r\n    public moveCanvasDown(rate?: number) {\r\n        const distance = this.calculateScrollDistance(\"vertical\", rate); // in simulationUnits\r\n        this.setCanvasOrigin(new Vector2D(this.canvasSpace.origin.x, this.canvasSpace.origin.y - distance));\r\n    }\r\n    /**\r\n     * \r\n     * @param orientation \"horizontal\" | \"vertical\"\r\n     * @param rate a number *0<rate<1* - the relative distance of the screen dimension (h/v) that one scroll step will move (ie. 0.1 will scroll 10% of the width/height in a horizontal/vertical direction)\r\n     * @returns \r\n     */\r\n    private calculateScrollDistance(orientation: \"horizontal\" | \"vertical\", rate?: number): number {\r\n        if (rate === undefined) { rate = this.animationSettings.defaultScrollRate; }\r\n        switch (orientation) {\r\n            case \"horizontal\":\r\n                return this.visibleCanvas.width * rate * this.canvasSpace.zoomFactor;\r\n            case \"vertical\":\r\n                return this.visibleCanvas.height * rate * this.canvasSpace.zoomFactor;\r\n        }\r\n    }\r\n    public zoomOut(zoomCenter: Vector2D) {\r\n        const newZoom = this.canvasSpace.zoomFactor + this.animationSettings.defaultZoomStep;\r\n\r\n        let shiftOrigin: Vector2D = zoomCenter.scale(this.animationSettings.defaultZoomStep); // zoom step here is really the difference in zoom change (zoomFactor now - zoomFactor before)\r\n\r\n        this.canvasSpace.origin = new Vector2D(this.canvasSpace.origin.x - shiftOrigin.x, this.canvasSpace.origin.y + shiftOrigin.y);\r\n        this.canvasSpace.zoomFactor = newZoom;\r\n    }\r\n    public zoomIn(zoomCenter: Vector2D) {\r\n        if (this.canvasSpace.zoomFactor <= 1) { return; }\r\n        let newZoom = this.canvasSpace.zoomFactor - this.animationSettings.defaultZoomStep;\r\n\r\n        let shiftOrigin: Vector2D = zoomCenter.scale(this.animationSettings.defaultZoomStep); // zoom step here is really the difference in zoom change (zoomFactor now - zoomFactor before)\r\n\r\n        this.canvasSpace.origin = new Vector2D(this.canvasSpace.origin.x + shiftOrigin.x, this.canvasSpace.origin.y - shiftOrigin.y);\r\n        this.canvasSpace.zoomFactor = newZoom;\r\n    }\r\n    public getCanvasMousePosition(event: MouseEvent): Vector2D {\r\n        const rect = this.visibleCanvas.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        return new Vector2D(x, y);\r\n    }\r\n    public getCanvasTouchPosition(event: TouchEvent): Vector2D {\r\n        const rect = this.visibleCanvas.getBoundingClientRect();\r\n        const touch = event.touches[0];\r\n        return new Vector2D(touch.clientX - rect.left, touch.clientY - rect.top)\r\n    }\r\n    public getCanvasTouchEndPosition(event: TouchEvent): Vector2D {\r\n        const rect = this.visibleCanvas.getBoundingClientRect();\r\n        const touch = event.changedTouches[0];\r\n        return new Vector2D(touch.clientX - rect.left, touch.clientY - rect.top)\r\n    }\r\n}","\r\n/*\r\nJust Some functions\r\n(hopefully moderately helpful)\r\n*/\r\n//#region generic stuff\r\nexport function log(message: string) {\r\n    const timestamp = new Date();\r\n    const hours = timestamp.getHours().toString().padStart(2, '0');\r\n    const minutes = timestamp.getMinutes().toString().padStart(2, '0');\r\n    const seconds = timestamp.getSeconds().toString().padStart(2, '0');\r\n    const milliseconds = timestamp.getMilliseconds().toString().padStart(3, '0');\r\n\r\n    const formattedTimestamp = `${hours}:${minutes}:${seconds}.${milliseconds}`;\r\n    console.log(`[${formattedTimestamp}] ${message}`);\r\n}\r\n/**\r\n * min and max included\r\n * @returns random number\r\n */\r\nexport function rng(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n//#endregion\r\n\r\n//#region math stuff\r\n/**\r\n * empty string is NOT considered numeric\r\n * @param s the string to be examined\r\n * @returns true if s is a valid number, returns false otherwise\r\n */\r\nexport function isNumeric(s: string): boolean {\r\n    s = s.trim();\r\n    return (!isNaN(+s)) && s.length !== 0;\r\n}\r\n/**\r\n * @returns \"\", if d is a non-numeric string\r\n */\r\nexport function decimalToHex(d: string | number): string {\r\n    if (typeof(d) === \"string\")  {\r\n        if (isNumeric(d)) {\r\n            d = parseFloat(d);\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n    return d.toString(16);\r\n}\r\n/**\r\n * converts a hexadecimal-number-string to a decimal number and returns it\r\n * @returns 0 if hex is not a valid hexadecimal number\r\n */\r\nexport function hexToDecimal(hex: string): number {\r\n    const prefix = \"0x\"\r\n    if (!(hex.startsWith(prefix))) {\r\n        hex = prefix + hex;\r\n    }\r\n    const num: number = Number(hex);\r\n    const valid = !isNaN(num);\r\n    return valid ? num : 0;\r\n}\r\n/**\r\n * ensures min <= n <= max (Inclusive!)\r\n * @param n number to test against upper and lower bounds\r\n * @param min the lowest allowed value for n\r\n * @param max the highest allowed value for n\r\n * @returns n if n satisfies min <= n <= max, otherwise min or max are returned\r\n */\r\nexport function ensureNumberInRange(n: number, min: number, max: number): number {\r\n    return Math.max(min, Math.min(n, max))\r\n}\r\n//#endregion\r\n\r\n//#region string stuff\r\n/**\r\n * Removes all occurrences of charToRemove from the beginning of str\r\n * @param str the string to be modified\r\n * @param charToRemove ***optional*** If no value is provided the first character of str is used.\r\n */\r\nexport function removeLeadingChar(str: string, charToRemove?: string): string {\r\n    if (str.length < 1) { return \"\"; }\r\n    if (charToRemove === undefined) {\r\n        charToRemove = str[0];\r\n    }\r\n\r\n    while (str.startsWith(charToRemove)) {\r\n        str = str.slice(charToRemove.length);\r\n    }\r\n    return str;\r\n}\r\n//#endregion\r\n\r\n//#region input stuff\r\nexport function getInputValue(inputElement: HTMLInputElement): string \r\nexport function getInputValue(inputId: string): string \r\nexport function getInputValue(input: string | HTMLInputElement): string {\r\n    let inputElement: HTMLInputElement;\r\n    if (typeof input === \"string\") {\r\n        inputElement = <HTMLInputElement>document.getElementById(input);\r\n    } else {\r\n        inputElement = input;\r\n    }\r\n    return inputElement.value.trim();\r\n}\r\n/**\r\n * @param input an HTMLInputElement, or the id for the Element\r\n * @returns element's value attribute; 0 if value is not numeric\r\n */\r\nexport function getInputNumber(input: string | HTMLInputElement): number {\r\n    let inputValue: string\r\n    if (typeof input === \"string\") {\r\n        inputValue = getInputValue(input);\r\n    } else {\r\n        inputValue = getInputValue(input);\r\n    }\r\n    return isNumeric(inputValue) ? +inputValue : 0;\r\n}\r\n/**\r\n * @param inputId id for a checkable input (radioButton, checkbox)\r\n * @returns true if checked, false otherwise\r\n */\r\nexport function isChecked(inputElement: HTMLInputElement): boolean\r\nexport function isChecked(inputId: string): boolean\r\nexport function isChecked(input: string | HTMLInputElement): boolean {\r\n    let checkbox: HTMLInputElement;\r\n    if (typeof input === \"string\") {\r\n        checkbox = document.getElementById(input) as HTMLInputElement;\r\n    } else {\r\n        checkbox = input;\r\n    }\r\n    return checkbox ? checkbox.checked : false;\r\n}\r\n//#endregion","import { InferCustomEventPayload } from \"vite\";\r\nimport { Body2d, Simulation } from \"./gravity\";\r\nimport { Vector2D } from \"./vector2d\";\r\nimport { CanvasClickAction, MouseBtnState } from \"./types\";\r\nimport { Canvas } from \"./canvas\";\r\nimport * as tsEssentials from \"./essentials\";\r\n\r\nlet canvas: Canvas;\r\nlet simulation: Simulation;\r\nlet statusBar: { fields: HTMLElement[] } = { fields: [] };\r\nlet selectedMassInput: number;\r\nlet canvasLeftMouseState: MouseBtnState = MouseBtnState.Up;\r\nlet lastMainMouseBtnDownPositionOnCanvas: Vector2D = new Vector2D (0, 0);\r\nlet selectedCanvasClickAction: string;\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", initialize);\r\nfunction initialize() {\r\n    initStatusBar();\r\n    registerEvents();\r\n    initCanvas(1280, 720);\r\n    initSimulation();\r\n    selectedMassInput = tsEssentials.getInputNumber(\"massInput\");\r\n    (<HTMLInputElement>document.getElementById(\"massInput\")!).step = calculateMassInputStep();\r\n    selectedCanvasClickAction = (document.querySelector('input[name=\"radioBtnMouseAction\"]:checked') as HTMLInputElement).value;\r\n    (<HTMLInputElement>document.getElementById(\"cbxElasticCollisions\")).disabled = !simulation.collisionDetection;\r\n    document.removeEventListener(\"DOMContentLoaded\", initialize);\r\n}\r\nfunction registerEvents() {\r\n    document.getElementById(\"btnToggleSim\")?.addEventListener(\"click\", toggleSimulationClicked);\r\n    document.getElementById(\"btnNextStep\")?.addEventListener(\"click\", nextStepClicked);\r\n    document.getElementById(\"btnResetSim\")?.addEventListener(\"click\", resetClicked);\r\n    document.getElementById(\"btnZoomOut\")?.addEventListener(\"click\", zoomOutClicked);\r\n    document.getElementById(\"btnZoomIn\")?.addEventListener(\"click\", zoomInClicked);\r\n    document.getElementById(\"btnScrollLeft\")?.addEventListener(\"click\", scrollLeftClicked);\r\n    document.getElementById(\"btnScrollRight\")?.addEventListener(\"click\", scrollRightClicked);\r\n    document.getElementById(\"btnScrollUp\")?.addEventListener(\"click\", scrollUpClicked);\r\n    document.getElementById(\"btnScrollDown\")?.addEventListener(\"click\", scrollDownClicked);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"mousedown\", canvasMouseDown);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"mouseup\", canvasMouseUp);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"mouseout\", canvasMouseOut);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"mousemove\", canvasMouseMove);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"touchstart\", canvasTouchStart);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"touchend\", canvasTouchEnd);\r\n    document.getElementById(\"theCanvas\")?.addEventListener(\"touchmove\", canvasTouchMove);\r\n    document.getElementById(\"massInput\")?.addEventListener(\"change\", massInputChanged);\r\n    document.getElementById(\"cbxDisplayVectors\")?.addEventListener(\"change\", cbxDisplayVectorsChanged);\r\n    document.getElementById(\"cbxCollisions\")?.addEventListener(\"change\", cbxCollisionsChanged);\r\n    document.getElementById(\"cbxElasticCollisions\")?.addEventListener(\"change\", cbxElasticCollisionsChanged);\r\n    document.querySelectorAll('input[name=\"radioBtnMouseAction\"]').forEach((radioButton) => {\r\n        radioButton.addEventListener('change', radioBtnMouseActionChanged);\r\n      });\r\n}\r\n//#region eventHandlers\r\nfunction zoomOutClicked(this: HTMLElement, ev: MouseEvent) {\r\n    canvas.zoomOut(new Vector2D(canvas.visibleCanvas.width / 2, canvas.visibleCanvas.height / 2));\r\n    canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n    setStatusMessage(`Zoom: ${canvas.canvasSpace.zoomFactor} (m per pixel)`, 4);\r\n}\r\nfunction zoomInClicked(this: HTMLElement, ev: MouseEvent) {\r\n    canvas.zoomIn(new Vector2D(canvas.visibleCanvas.width / 2, canvas.visibleCanvas.height / 2));\r\n    canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n    setStatusMessage(`Zoom: ${canvas.canvasSpace.zoomFactor} (m per pixel)`, 4);\r\n}\r\nfunction scrollLeftClicked(this: HTMLElement, ev: MouseEvent) {\r\n    canvas.moveCanvasLeft();\r\n    canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n}\r\nfunction scrollRightClicked(this: HTMLElement, ev: MouseEvent) {\r\n    canvas.moveCanvasRight();\r\n    canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n}\r\nfunction scrollUpClicked(this: HTMLElement, ev: MouseEvent) {\r\n    canvas.moveCanvasUp();\r\n    canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n}\r\nfunction scrollDownClicked(this: HTMLElement, ev: MouseEvent) {\r\n    canvas.moveCanvasDown();\r\n    canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n}\r\nfunction massInputChanged(this: HTMLElement) {\r\n    const element = this as HTMLInputElement;\r\n    const inputValue = element.value;\r\n    selectedMassInput = tsEssentials.isNumeric(inputValue) ? +inputValue : 0;\r\n    element.step = calculateMassInputStep(); // step = 10% of input value, round down to nearest power of 10\r\n}\r\nfunction cbxCollisionsChanged(event: Event) {\r\n    const checked = tsEssentials.isChecked(event.target as HTMLInputElement);\r\n    const cbxElastic: HTMLInputElement = <HTMLInputElement>document.getElementById(\"cbxElasticCollisions\");\r\n    const elasticChecked = tsEssentials.isChecked(cbxElastic);\r\n    simulation.collisionDetection = checked;\r\n    simulation.elasticCollisions = elasticChecked;\r\n\r\n    cbxElastic.disabled = !checked;\r\n}\r\nfunction cbxElasticCollisionsChanged(event: Event) {\r\n    const checked = tsEssentials.isChecked(event.target as HTMLInputElement);\r\n    simulation.elasticCollisions = checked;\r\n}\r\nfunction cbxDisplayVectorsChanged(event: Event) {\r\n    const checkbox = event.target as HTMLInputElement;\r\n    canvas.animationSettings.displayVectors = checkbox ? checkbox.checked : false;\r\n    if (!canvas.animationRunning) {\r\n        canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n    }\r\n}\r\nfunction radioBtnMouseActionChanged(event: Event): void {\r\n    const target = event.target as HTMLInputElement;\r\n    if (target && target.type === 'radio') {\r\n      selectedCanvasClickAction = target.value;\r\n    }\r\n}\r\nfunction toggleSimulationClicked(this: HTMLElement, ev: MouseEvent) {\r\n    if (simulation.running) {\r\n        pauseSimulation();\r\n    } else {\r\n        resumeSimulation();\r\n    }\r\n}\r\nfunction nextStepClicked() {\r\n    if (canvas.animationRunning) {\r\n        return;\r\n    }\r\n    simulation.nextState();\r\n    canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n    setStatusMessage(`Simulation Tick: ${simulation.tickCount}`, 2);\r\n    setStatusMessage(`Number of Bodies: ${simulation.simulationState.length}`, 1);\r\n}\r\nfunction resetClicked() {\r\n    if (simulation.running) {\r\n        pauseSimulation();\r\n    }\r\n    simulation.clearObjects();\r\n    simulation.tickCount = 0;\r\n    canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n    setStatusMessage(`Simulation Tick: ${simulation.tickCount}`, 2);\r\n    setStatusMessage(`Number of Bodies: ${simulation.simulationState.length}`, 1);\r\n}\r\nfunction canvasMouseDown(this: HTMLElement, ev: MouseEvent) {\r\n    if (ev.button !== 0) {\r\n        return; // do nothing if a button other than the main mouse button is clicked\r\n    }\r\n    canvasLeftMouseState = MouseBtnState.Down;\r\n    const mousePosition: Vector2D = canvas.getCanvasMousePosition(ev);\r\n    \r\n    switch (CanvasClickAction[selectedCanvasClickAction as keyof typeof CanvasClickAction]) {\r\n        case CanvasClickAction.None:  \r\n            break;\r\n        case CanvasClickAction.AddBody:\r\n            lastMainMouseBtnDownPositionOnCanvas = mousePosition;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\nfunction canvasMouseMove(this: HTMLElement, ev: MouseEvent) {\r\n    if (canvasLeftMouseState === MouseBtnState.Up) {\r\n        return;\r\n    }\r\n}\r\nfunction canvasMouseUp(this: HTMLElement, ev: MouseEvent) {\r\n    if (ev.button !== 0 || canvasLeftMouseState === MouseBtnState.Up) {\r\n        return;\r\n    }\r\n    canvasLeftMouseState = MouseBtnState.Up;\r\n    const mousePosition: Vector2D = canvas.getCanvasMousePosition(ev);\r\n    \r\n    switch (CanvasClickAction[selectedCanvasClickAction as keyof typeof CanvasClickAction]) {\r\n        case CanvasClickAction.None:\r\n            break;\r\n        case CanvasClickAction.AddBody:\r\n            const bodyBeingAdded: Body2d = body2dFromInputs();\r\n            if (bodyBeingAdded.mass <= 0) { break; }\r\n            const vel: Vector2D = calculateVelocityBetweenPoints(canvas.pointFromCanvasSpaceToSimulationSpace(lastMainMouseBtnDownPositionOnCanvas), canvas.pointFromCanvasSpaceToSimulationSpace(mousePosition));\r\n            simulation.addObject(bodyBeingAdded, canvas.pointFromCanvasSpaceToSimulationSpace(mousePosition), vel);\r\n            setStatusMessage(`Number of Bodies: ${simulation.simulationState.length}`, 1);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (!canvas.animationRunning) {\r\n        canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n    }\r\n}\r\nfunction canvasMouseOut(this: HTMLElement, ev: MouseEvent) {\r\n    canvasLeftMouseState = MouseBtnState.Up;\r\n}\r\nfunction canvasTouchStart(this: HTMLElement, ev: TouchEvent) {\r\n    canvasLeftMouseState = MouseBtnState.Down;\r\n    const touchPosition = canvas.getCanvasTouchPosition(ev);\r\n\r\n    switch (CanvasClickAction[selectedCanvasClickAction as keyof typeof CanvasClickAction]) {\r\n        case CanvasClickAction.None:\r\n            break;\r\n        case CanvasClickAction.AddBody:\r\n            ev.preventDefault();\r\n            lastMainMouseBtnDownPositionOnCanvas = touchPosition;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\nfunction canvasTouchMove(this: HTMLElement, ev: TouchEvent) {\r\n    const touchPosition = canvas.getCanvasTouchEndPosition(ev);\r\n    tsEssentials.log(touchPosition.toString())\r\n    if (touchPosition.x > canvas.visibleCanvas.width || touchPosition.y > canvas.visibleCanvas.height) {\r\n        canvasLeftMouseState = MouseBtnState.Up;\r\n    }\r\n}\r\nfunction canvasTouchEnd(this: HTMLElement, ev: TouchEvent) {\r\n    if (canvasLeftMouseState === MouseBtnState.Up) {\r\n        return;\r\n    }\r\n    canvasLeftMouseState = MouseBtnState.Up;\r\n    const touchPosition = canvas.getCanvasTouchEndPosition(ev);\r\n\r\n    switch (CanvasClickAction[selectedCanvasClickAction as keyof typeof CanvasClickAction]) {\r\n        case CanvasClickAction.None:\r\n            break;\r\n        case CanvasClickAction.AddBody:\r\n            const bodyBeingAdded = body2dFromInputs();    \r\n            if (bodyBeingAdded.mass <= 0) { break; }\r\n            const vel: Vector2D = calculateVelocityBetweenPoints(canvas.pointFromCanvasSpaceToSimulationSpace(lastMainMouseBtnDownPositionOnCanvas), canvas.pointFromCanvasSpaceToSimulationSpace(touchPosition));\r\n            simulation.addObject(bodyBeingAdded, canvas.pointFromCanvasSpaceToSimulationSpace(touchPosition), vel);\r\n            setStatusMessage(`Number of Bodies: ${simulation.simulationState.length}`, 1);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (!canvas.animationRunning) {\r\n        canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n    }\r\n}\r\n//#endregion\r\nfunction initSimulation() {\r\n    simulation = new Simulation();\r\n    simulation.collisionDetection = tsEssentials.isChecked(\"cbxCollisions\");\r\n    simulation.elasticCollisions = tsEssentials.isChecked(\"cbxElasticCollisions\");\r\n}\r\nfunction initStatusBar() {\r\n    const idBeginsWith = \"statusText\";\r\n    let i = 1;\r\n    let statusBarField = document.getElementById(idBeginsWith + i);\r\n    while (statusBarField !== null) {\r\n        statusBar.fields.push(statusBarField)\r\n        i++;\r\n        statusBarField = document.getElementById(idBeginsWith + i);\r\n    }\r\n}\r\n/**\r\n * The step is equal to 10% of the input value, rounded down to the nearest power of 10.\r\n * @returns Step as a string. Step is always at least 1 or larger.\r\n */\r\nfunction calculateMassInputStep(): string {\r\n    let step = (10 ** (Math.floor(Math.log10(selectedMassInput)) - 1));\r\n    return step < 1 ? \"1\" : step.toString();\r\n}\r\nfunction body2dFromInputs(): Body2d {\r\n    const movable = tsEssentials.isChecked(\"cvsCbxBodyMovable\");\r\n    return new Body2d(selectedMassInput, movable);\r\n}\r\n/**\r\n * @param fieldIndexOrId number of field, starting at one. OR id of the field\r\n */\r\nfunction setStatusMessage(newMessage: string, fieldIndexOrId?: number | string, append: boolean = false) {\r\n    let element: HTMLElement;\r\n    if (typeof fieldIndexOrId === \"number\") {\r\n        element = statusBar.fields[fieldIndexOrId - 1];\r\n    } else if (typeof fieldIndexOrId === \"string\") {\r\n        element = document.getElementById(fieldIndexOrId)!;\r\n    } else {\r\n        element = statusBar.fields[0];\r\n    }\r\n    \r\n    if (append) {\r\n        element!.innerHTML += newMessage;\r\n    } else {\r\n        element!.innerHTML = newMessage;\r\n    }\r\n}\r\nfunction initCanvas(width: number, height: number) {\r\n    const visibleCanvas = (document.getElementById(\"theCanvas\")) as HTMLCanvasElement;\r\n    canvas = new Canvas(visibleCanvas);\r\n    canvas.visibleCanvas.width = width;\r\n    canvas.visibleCanvas.height = height;\r\n    canvas.animationSettings.displayVectors = tsEssentials.isChecked(\"cbxDisplayVectors\");\r\n    setStatusMessage(`Canvas dimension: ${width} * ${height}`, 5);\r\n    // offscreenCanvas = new OffscreenCanvas(visibleCanvas.clientWidth, visibleCanvas.clientHeight);\r\n    // offscreenCanvasCtx = offscreenCanvas.getContext(\"2d\")!;\r\n}\r\n// #region simulation\r\n/**\r\n * Calculates and returns the velocity vector needed to get from *fromCoordinate* to *toCoordinate* in *timeFrameInSeconds* seconds\r\n * @param toCoordinate value in simulation space\r\n * @param fromCoordinate value in simulation space\r\n * @param timeFrameInSeconds *optional* defaults to one\r\n */\r\nfunction calculateVelocityBetweenPoints(toCoordinate: Vector2D, fromCoordinate: Vector2D, timeFrameInSeconds: number = 1): Vector2D {\r\n    if (timeFrameInSeconds <= 0) { timeFrameInSeconds = 1; }\r\n    let distance: Vector2D = toCoordinate.subtract(fromCoordinate);\r\n    return distance.scale(1 / timeFrameInSeconds);\r\n}\r\nfunction resumeSimulation() {\r\n    if (!simulation.running) {\r\n        simulation.run();\r\n        drawRunningSimulation();\r\n        setStatusMessage(`Number of Bodies: ${simulation.simulationState.length}`, 1);\r\n        document.getElementById(\"btnToggleSim\")!.innerHTML = \"Pause\";\r\n    }\r\n}\r\nfunction pauseSimulation() {\r\n    if (simulation.running) {\r\n        canvas.animationRunning = false;\r\n        simulation.pause();\r\n        document.getElementById(\"btnToggleSim\")!.innerHTML = \"Play\";\r\n    }\r\n}\r\nfunction drawRunningSimulation() {\r\n    if (canvas.animationRunning) {\r\n        return;\r\n    }\r\n    canvas.animationRunning = true;\r\n    const runDrawLoop = () => {\r\n        if (canvas.animationRunning) {\r\n            setTimeout(runDrawLoop, canvas.animationSettings.frameLength);\r\n            canvas.redrawSimulationState(simulation.simulationState, canvas.animationSettings.displayVectors);\r\n            setStatusMessage(`Simulation Tick: ${simulation.tickCount}`, 2);\r\n            setStatusMessage(`Number of Bodies: ${simulation.simulationState.length}`, 1);\r\n        }\r\n    };\r\n    runDrawLoop();\r\n}\r\n// #endregion\r\n"],"names":["Vector2D","x","y","__publicField","vectors","previous","current","v","scalar","magnitude","_Body2d","mass","movable","color","radius","newMass","newRadius","affected","c","Body2d","Simulation","objectState","running","tickCount","collisionDetection","elasticCollisions","g","bodyOrObject","position","velocity","i","forces","index","newAcceleration","j","forceOnI","forceOnJ","dt","objectStateI","objectStateJ","distance","netForceBetweenBodies","distanceIJ","index1","index2","state1","state2","totalMomentum","totalMass","resultingVelocity","changeObject","removeIndex","body1","body2","restitution","displacement","normalizedDisplacement","velocityAlongDisplacement","impulseScalar","deltaV1","deltaV2","objectState1","objectState2","normalDisplacement","targetDistance","totalMoveDistance","moveBody1","moveBody2","runSimulationStep","CanvasClickAction","MouseBtnState","Canvas","visibleCanvas","canvas","context","canvasSpace","animationSetting","animationRunning","direction","endPosition","objectStates","body","visibleRadius","object","displayVectors","simVector","shifted","canvasVector","simulationVector","newOrigin","rate","orientation","zoomCenter","newZoom","shiftOrigin","event","rect","touch","log","message","timestamp","hours","minutes","seconds","milliseconds","formattedTimestamp","isNumeric","s","getInputValue","input","inputElement","getInputNumber","inputValue","isChecked","checkbox","simulation","statusBar","selectedMassInput","canvasLeftMouseState","lastMainMouseBtnDownPositionOnCanvas","selectedCanvasClickAction","initialize","initStatusBar","registerEvents","initCanvas","initSimulation","tsEssentials.getInputNumber","calculateMassInputStep","_a","toggleSimulationClicked","_b","nextStepClicked","_c","resetClicked","_d","zoomOutClicked","_e","zoomInClicked","_f","scrollLeftClicked","_g","scrollRightClicked","_h","scrollUpClicked","_i","scrollDownClicked","_j","canvasMouseDown","_k","canvasMouseUp","_l","canvasMouseOut","_m","canvasMouseMove","_n","canvasTouchStart","_o","canvasTouchEnd","_p","canvasTouchMove","_q","massInputChanged","_r","cbxDisplayVectorsChanged","_s","cbxCollisionsChanged","_t","cbxElasticCollisionsChanged","radioButton","radioBtnMouseActionChanged","ev","setStatusMessage","element","tsEssentials.isNumeric","checked","tsEssentials.isChecked","cbxElastic","elasticChecked","target","pauseSimulation","resumeSimulation","mousePosition","bodyBeingAdded","body2dFromInputs","vel","calculateVelocityBetweenPoints","touchPosition","tsEssentials.log","idBeginsWith","statusBarField","step","newMessage","fieldIndexOrId","append","width","height","toCoordinate","fromCoordinate","timeFrameInSeconds","drawRunningSimulation","runDrawLoop"],"mappings":"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"}